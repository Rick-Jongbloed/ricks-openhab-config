// ========= OVERLOOP ZOLDER =========
// licht wasmachineruimte
Switch		switch_licht_wasmachine_net_online						        "Licht wasmachinehok (net) [%s]"					                        <network>				(g_sonoff_licht_washoek)							                                { channel="network:pingdevice:192_168_1_151:online" }	
Number		switch_licht_wasmachine_net_time						        "Licht wasmachinehok (ping) [%.0f ms]"				                        <status>				(g_sonoff_licht_washoek, g_chart, g_elastic_mqtt)							                        { channel="network:pingdevice:192_168_1_151:latency" }
DateTime	switch_licht_wasmachine_net_lastseen				            "Licht wasmachinehok (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"		    <calendar>				(g_sonoff_licht_washoek, g_restore)                                                 { channel="network:pingdevice:192_168_1_151:lastseen" }            
Switch		switch_licht_wasmachine_toggle							        "Licht wasmachinehok (switch) [%s]"					                        <light> 				(g_sonoff_licht_washoek, sf_corridor)				                                { mqtt=">[mosquitto:cmnd/sonoff_licht_washoek/power:command:*:default], <[mosquitto:stat/sonoff_licht_washoek/POWER:state:default]" }
String		switch_licht_wasmachine_toggle_startup_state			        "Licht wasmachinehok (startup state) [%s]"			                        <light> 				(g_sonoff_licht_washoek, g_maintenance_sonoff_status, g_sonoff_startup_states)		{mqtt="<[mosquitto:stat/sonoff_licht_washoek/STATUS11:state:JSONPATH($.StatusSTS.POWER)]" }
Switch		switch_licht_wasmachine_reachable						        "Licht wasmachinehok (reachable) [%s]"				                        <status>				(g_sonoff_licht_washoek)							                                { mqtt="<[mosquitto:tele/sonoff_licht_washoek/LWT:state:MAP(reachable.map)]"}
Number		switch_licht_wasmachine_rssi							        "Licht wasmachinehok (RSSI) [%d %%]"				                        <network>				(g_sonoff_licht_washoek, g_chart, g_elastic_mqtt)						                            { mqtt="<[mosquitto:tele/sonoff_licht_washoek/STATE:state:JSONPATH($.Wifi.RSSI)], <[mosquitto:stat/sonoff_licht_washoek/STATUS11:state:JSONPATH($.StatusSTS.Wifi.RSSI)]"}
String 		switch_licht_wasmachine_action__sonoff_licht_washoek	        "Licht wasmachinehok (action)"					                            <network>				(g_maintenance_sonoff_action)				                                        { autoupdate="false" }
String		switch_licht_wasmachine_local_fw_version 				        "Licht wasmachinehok (running fw version) [%s]"						    		                    (g_sonoff_licht_washoek, g_maintenance_sonoff_status, g_sonoff_firmware) 	    	{ mqtt="<[mosquitto:tele/sonoff_licht_washoek/INFO1:state:JSONPATH($.Version)], <[mosquitto:stat/sonoff_licht_washoek/STATUS2:state:JSONPATH($.StatusFWR.Version)]" }
String		switch_licht_wasmachine_fw_version 						        "Licht wasmachinehok (fw version) [%s]"								                                (g_sonoff_licht_washoek, g_maintenance_sonoff_status)
Switch		switch_licht_wasmachine_led_power 						        "Licht wasmachinehok (led power) [%s]"								                                (g_sonoff_licht_washoek)                                                            { mqtt=">[mosquitto:cmnd/sonoff_licht_washoek/LedPower:command:*:default]" }
Number		switch_licht_wasmachine_led_state 						        "Licht wasmachinehok (led state) [%d]"								                                (g_sonoff_licht_washoek, g_maintenance_sonoff_status)                               { mqtt=">[mosquitto:cmnd/sonoff_licht_washoek/LedState:command:*:default], <[mosquitto:stat/sonoff_licht_washoek/STATUS:state:JSONPATH($.Status.LedState)]" }
String		switch_licht_wasmachine_button_topic    				        "Licht wasmachinehok (button topic) [%s]"								                            (g_sonoff_licht_washoek, g_maintenance_sonoff_status)                               { mqtt=">[mosquitto:cmnd/sonoff_licht_washoek/ButtonTopic:command:*:default], <[mosquitto:stat/sonoff_licht_washoek/STATUS:state:JSONPATH($.Status.ButtonTopic)]" }
String		switch_licht_wasmachine_button_toggle    				        "Licht wasmachinehok (button toggle) [%s]"								                            (g_sonoff_licht_washoek, g_maintenance_sonoff_status)                               { mqtt=">[mosquitto:cmnd/sonoff_licht_washoek_button/power:command:*:default], <[mosquitto:cmnd/sonoff_licht_washoek_button/POWER:state:default]" }

// bewegingssensor wasmachine
Switch      sensor_motion_wasmachine_motion_status                          "Bewegingssensor wasmachine (status) [%s]"                                     <motion>                 (g_mihome_motionsensor_wasmachine, sf_corridor)                                 { channel="mihome:sensor_motion:158d00015e7b6a:motion" }
Number      sensor_motion_wasmachine_motion_timer                           "Bewegingssensor wasmachine (timer) [%d]"                                      <clock>                  (g_mihome_motionsensor_wasmachine)                                              { channel="mihome:sensor_motion:158d00015e7b6a:motionOffTimer" }      // minimum 5 seconds - remember that the sensor only triggers every minute to save energy
DateTime    sensor_motion_wasmachine_last_motion                            "Bewegingssensor wasmachine (last motion) [%1$tY-%1$tm-%1$td  %1$tH:%1$tM]"    <motion>               (g_mihome_motionsensor_wasmachine, sf_corridor, g_restore, g_lastupdate)          { channel="mihome:sensor_motion:158d00015e7b6a:lastMotion" }
Number      sensor_motion_wasmachine_battery                                "Bewegingssensor wasmachine (battery) [%d %%]"                                 <battery>                (g_mihome_motionsensor_wasmachine, g_restore, g_chart, g_elastic_mqtt)                          { channel="mihome:sensor_motion:158d00015e7b6a:batteryLevel" }
Switch      sensor_motion_wasmachine_battery_low                            "Bewegingssensor wasmachine (battery low) [%s]"                                <energy>                 (g_mihome_motionsensor_wasmachine, g_restore)                                   { channel="mihome:sensor_motion:158d00015e7b6a:lowBattery" }



// meter voor ventilatie - geen toggle!
Switch	 	meter_ventilator_net_online								        "Meter ventilator (net) [%s]"								                <network>		        (g_sonoff_meter_ventilator)                                                         { channel="network:pingdevice:192_168_1_154:online" }
Number 		meter_ventilator_net_time								        "Meter ventilator (ping) [%.0f ms]"						                    <status>			    (g_sonoff_meter_ventilator, g_chart, g_elastic_mqtt)                                     { channel="network:pingdevice:192_168_1_154:latency" }
DateTime	meter_ventilator_net_lastseen				                    "Meter ventilator (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"		        <calendar>				(g_sonoff_meter_ventilator, g_restore)                                               { channel="network:pingdevice:192_168_1_154:lastseen" }            
Number 		meter_ventilator_power             		 		                "Meter ventilator (power) [%.1f W]"						                    <energy>			    (g_sonoff_meter_ventilator, g_chart, g_elastic_mqtt)			                {mqtt="<[mosquitto:tele/sonoff_meter_ventilatie/ENERGY:state:JSONPATH($.Power)]" }
Number 		meter_ventilator_voltage            				            "Meter ventilator (line voltage) [%.1f V]"				                    <energy>			    (g_sonoff_meter_ventilator, g_chart, g_elastic_mqtt)			                {mqtt="<[mosquitto:tele/sonoff_meter_ventilatie/ENERGY:state:JSONPATH($.Voltage)]" }
Number 		meter_ventilator_current            				            "Meter ventilator (line current) [%.1f A]"				                    <energy>			    (g_sonoff_meter_ventilator, g_chart, g_elastic_mqtt)						                {mqtt="<[mosquitto:tele/sonoff_meter_ventilatie/ENERGY:state:JSONPATH($.Current)]" }
Number 		meter_ventilator_real_power_factor					            "Meter ventilator (real power ratio) [%s]"				                    <energy>			    (g_sonoff_meter_ventilator, g_elastic_mqtt)						                {mqtt="<[mosquitto:tele/sonoff_meter_ventilatie/ENERGY:state:JSONPATH($.Factor)]" }
Number 		meter_ventilator_energy_usage_since_last_update	                "Meter ventilator (usage since last update) [%.1f kWh]"	                    <energy>			    (g_sonoff_meter_ventilator, g_elastic_mqtt)						                {mqtt="<[mosquitto:tele/sonoff_meter_ventilatie/ENERGY:state:JSONPATH($.Period)]" }
Number 		meter_ventilator_energy_usage_today				                "Meter ventilator (today's usage) [%.1f kWh]"				                <energy>		        (g_sonoff_meter_ventilator, g_elastic_mqtt)						                {mqtt="<[mosquitto:tele/sonoff_meter_ventilatie/ENERGY:state:JSONPATH($.Yesterday)]" }
Number 		meter_ventilator_energy_usage_yesterday 			            "Meter ventilator (yesterday's usage) [%.1f kWh]"			                <energy>		        (g_sonoff_meter_ventilator, g_elastic_mqtt)						                {mqtt="<[mosquitto:tele/sonoff_meter_ventilatie/ENERGY:state:JSONPATH($.Today)]" }
String	 	meter_ventilator_action__sonoff_meter_ventilatie                "Meter ventilator (action)"								                    <network>			    (g_maintenance_sonoff_action)					                {autoupdate="false" }
String		meter_ventilator_local_fw_version 					            "Meter ventilator (running fw version) [%s]"								                        (g_sonoff_meter_ventilator, g_maintenance_sonoff_status, g_sonoff_firmware) 		                                                { mqtt="<[mosquitto:tele/sonoff_meter_ventilatie/INFO1:state:JSONPATH($.Version)], <[mosquitto:stat/sonoff_meter_ventilatie/STATUS2:state:JSONPATH($.StatusFWR.Version)]" }
String		meter_ventilator_fw_version 						            "Meter ventilator (fw version) [%s]"										                        (g_sonoff_meter_ventilator, g_maintenance_sonoff_status)
Switch		meter_ventilator_reachable								        "Meter ventilator (reachable) [%s]"				                            <switch>				(g_sonoff_meter_ventilator)										                                                                    { mqtt="<[mosquitto:tele/sonoff_meter_ventilatie/LWT:state:MAP(reachable.map)]" }
Number		meter_ventilator_rssi									        "Meter ventilator (RSSI) [%d %%]"					                        <status>				(g_sonoff_meter_ventilator, g_chart, g_elastic_mqtt)							                                                                    { mqtt="<[mosquitto:tele/sonoff_meter_ventilatie/STATE:state:JSONPATH($.Wifi.RSSI)]" }	

// switch ventilator
Switch		switch_ventilator_net_online							        "Switch ventilator (net) [%s]"						                        <network>			    (g_sonoff_ventilatie)                                                                                                           { channel="network:pingdevice:192_168_1_158:online" }
Number		switch_ventilator_net_time								        "Switch ventilator (ping) [%.0f ms]"				                        <status>		        (g_sonoff_ventilatie, g_chart, g_elastic_mqtt)                                                                                                  { channel="network:pingdevice:192_168_1_158:latency" }
DateTime	switch_ventilator_net_lastseen				                    "Switch ventilator (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"		        <calendar>	    	    (g_sonoff_ventilatie, g_restore)                                                                                                { channel="network:pingdevice:192_168_1_158:lastseen" }            
Switch		switch_ventilator_toggle_1								        "Switch ventilator (switch 1) [%s]"					                        <fan> 					(g_sonoff_ventilatie, sf_corridor, g_chart, g_elastic_mqtt)						                                                                { mqtt=">[mosquitto:cmnd/sonoff_switch_ventilatie/power1:command:*:default], <[mosquitto:stat/sonoff_switch_ventilatie/POWER1:state:default]" } // 1
String		switch_ventilator_toggle_1_startup_state				        "Switch ventilator (sw1: startup state) [%s]"		                        <light> 				(g_sonoff_ventilatie, g_maintenance_sonoff_status, g_sonoff_startup_states)				                                        { mqtt="<[mosquitto:stat/sonoff_switch_ventilatie/STATUS11:state:JSONPATH($.StatusSTS.POWER1)]" }
Switch		switch_ventilator_toggle_2								        "Switch ventilator (switch 2) [%s]"					                        <fan> 					(g_sonoff_ventilatie, sf_corridor, g_chart, g_elastic_mqtt)					                                                                	{ mqtt=">[mosquitto:cmnd/sonoff_switch_ventilatie/power2:command:*:default], <[mosquitto:stat/sonoff_switch_ventilatie/POWER2:state:default]" } // 2 
String		switch_ventilator_toggle_2_startup_state				        "Switch ventilator (sw2: startup state) [%s]"		                        <light> 				(g_sonoff_ventilatie, g_maintenance_sonoff_status, g_sonoff_startup_states)				                                        { mqtt="<[mosquitto:stat/sonoff_switch_ventilatie/STATUS11:state:JSONPATH($.StatusSTS.POWER2)]" }
Switch		switch_ventilator_reachable								        "Switch ventilator (reachable) [%s]"				                        <switch>				(g_sonoff_ventilatie)											                                                                { mqtt="<[mosquitto:tele/sonoff_switch_ventilatie/LWT:state:MAP(reachable.map)]" }
Number		switch_ventilator_rssi									        "Switch ventilator (RSSI) [%d %%]"					                        <status>				(g_sonoff_ventilatie, g_chart, g_elastic_mqtt)									                                                                { mqtt="<[mosquitto:tele/sonoff_switch_ventilatie/STATE:state:JSONPATH($.Wifi.RSSI)]" }	
String		switch_ventilator_action__sonoff_switch_ventilatie		        "Switch ventilator (action)"						                        <network>				(g_maintenance_sonoff_action)								                                                                    { autoupdate="false" }
String		switch_ventilator_local_fw_version 						        "Switch ventilator (running fw version) [%s]"							    	                    (g_sonoff_ventilatie, g_maintenance_sonoff_status, g_sonoff_firmware) 			                                                { mqtt="<[mosquitto:tele/sonoff_switch_ventilatie/INFO1:state:JSONPATH($.Version)], <[mosquitto:stat/sonoff_switch_ventilatie/STATUS2:state:JSONPATH($.StatusFWR.Version)]" }
String		switch_ventilator_fw_version 							        "Switch ventilator (fw version) [%s]"									    	                    (g_sonoff_ventilatie, g_maintenance_sonoff_status)          
Number		number_ventilator_level_set_manual						        "Stand ventilator (dashboard control) [%s]"  				                <fan>					(g_sonoff_ventilatie, sf_corridor, g_chart, g_elastic_mqtt)
Number		number_ventilator_level_set								        "Stand ventilator (device control) [%s]"				                    <fan>					(g_sonoff_ventilatie, sf_corridor, g_chart, g_elastic_mqtt)
Switch		switch_ventilator_level_toggle_auto						        "Stand ventilator (automatic) [%s]"					                        <fan>					(g_sonoff_ventilatie, sf_corridor, g_chart, g_elastic_mqtt) 					                                                                { expire="20m, state=ON" }  // expires in 20 minutes
Switch		switch_ventilator_level_set_manual_alexa    			        "Stand ventilator (alexa control) [%s]"  				                     <fan>					(g_sonoff_ventilatie, sf_corridor)

// ========= SPACECAVE =========
// Xiaomi Window Switch spacecave
Contact     sensor_spacecave_switch_status                                  "Deursensor spacecave (status) [%s]"                                       <door>                   (g_mihome_doorsensor_spacecave,sf_spacecave,g_restore)                                                                           { channel="mihome:sensor_magnet:158d0001d839b4:isOpen" }
Number      sensor_spacecave_alarm_timer                                    "Deursensor spacecave (alarm timer) [%d]"                                  <clock>                  (g_mihome_doorsensor_spacecave,sf_spacecave)                                                                                     { channel="mihome:sensor_magnet:158d0001d839b4:isOpenAlarmTimer" }       // minimum 30 seconds
DateTime    sensor_spacecave_last_opened                                    "Deursensor spacecave (Lastopenend) [%1$tY-%1$tm-%1$td  %1$tH:%1$tM]"      <clock-on>               (g_mihome_doorsensor_spacecave,sf_spacecave,g_restore)                                                                           { channel="mihome:sensor_magnet:158d0001d839b4:lastOpened" }
Number      sensor_spacecave_battery                                        "Deursensor spacecave (battery) [%d %%]"                                   <battery>                (g_mihome_doorsensor_spacecave,sf_spacecave,g_chart, g_elastic_mqtt)                                                                             { channel="mihome:sensor_magnet:158d0001d839b4:batteryLevel" }
Switch      sensor_spacecave_battery_low                                    "Deursensor spacecave (battery low) [%s]"                                  <energy>                 (g_mihome_doorsensor_spacecave,sf_spacecave)                                                                                     { channel="mihome:sensor_magnet:158d0001d839b4:lowBattery" }

// raam links       mihome:sensor_magnet_aq2:158d0001b7b5aa:isOpen
Contact     sensor_spacecave_raam_links_switch_status                       "Raam spacecave links (status) [%s]"                                       <window>                   (g_mihome_doorsensor_spacecave_raam_links,sf_spacecave,g_restore)                                                                           { channel="mihome:sensor_magnet_aq2:158d0001b70c4f:isOpen" }
Number      sensor_spacecave_raam_links_alarm_timer                         "Raam spacecave links(alarm timer) [%d]"                                  <clock>                   (g_mihome_doorsensor_spacecave_raam_links,sf_spacecave)                                                                                     { channel="mihome:sensor_magnet_aq2:158d0001b70c4f:isOpenAlarmTimer" }       // minimum 30 seconds
DateTime    sensor_spacecave_raam_links_last_opened                         "Raam spacecave links (Lastopenend) [%1$tY-%1$tm-%1$td  %1$tH:%1$tM]"      <clock-on>               (g_mihome_doorsensor_spacecave_raam_links,sf_spacecave,g_restore)                                                                           { channel="mihome:sensor_magnet_aq2:158d0001b70c4f:lastOpened" }
Number      sensor_spacecave_raam_links_battery                             "Raam spacecave links (battery) [%d %%]"                                   <battery>                (g_mihome_doorsensor_spacecave_raam_links,sf_spacecave,g_chart, g_elastic_mqtt)                                                                             { channel="mihome:sensor_magnet_aq2:158d0001b70c4f:batteryLevel" }
Switch      sensor_spacecave_raam_links_battery_low                         "Raam spacecave links (battery low) [%s]"                                  <energy>                 (g_mihome_doorsensor_spacecave_raam_links,sf_spacecave)                                                                                     { channel="mihome:sensor_magnet_aq2:158d0001b70c4f:lowBattery" }

// raam rechts
Contact     sensor_spacecave_raam_rechts_switch_status                      "Raam spacecave rechts (status) [%s]"                                       <window>                   (g_mihome_doorsensor_spacecave_raam_rechts,sf_spacecave,g_restore)                                                                           { channel="mihome:sensor_magnet_aq2:158d0001b7b5aa:isOpen" }
Number      sensor_spacecave_raam_rechts_alarm_timer                        "Raam spacecave rechts (alarm timer) [%d]"                                  <clock>                  (g_mihome_doorsensor_spacecave_raam_rechts,sf_spacecave)                                                                                     { channel="mihome:sensor_magnet_aq2:158d0001b7b5aa:isOpenAlarmTimer" }       // minimum 30 seconds
DateTime    sensor_spacecave_raam_rechts_last_opened                        "Raam spacecave rechts (Lastopenend) [%1$tY-%1$tm-%1$td  %1$tH:%1$tM]"      <clock-on>               (g_mihome_doorsensor_spacecave_raam_rechts,sf_spacecave,g_restore)                                                                           { channel="mihome:sensor_magnet_aq2:158d0001b7b5aa:lastOpened" }
Number      sensor_spacecave_raam_rechts_battery                            "Raam spacecave rechts (battery) [%d %%]"                                   <battery>                (g_mihome_doorsensor_spacecave_raam_rechts,sf_spacecave,g_chart, g_elastic_mqtt)                                                                             { channel="mihome:sensor_magnet_aq2:158d0001b7b5aa:batteryLevel" }
Switch      sensor_spacecave_raam_rechts_battery_low                        "Raam spacecave rechts (battery low) [%s]"                                  <energy>                 (g_mihome_doorsensor_spacecave_raam_rechts,sf_spacecave)                                                                                     { channel="mihome:sensor_magnet_aq2:158d0001b7b5aa:lowBattery" }



// spacecave pc
Switch		spacecave_pc_turn_off									        "Spacecave PC (Turn off)"							                        <switch>				(g_desktop_spacecave, sf_spacecave, scene_all_off, scene_all_off)				                                                { exec="OFF:ssh rebootuser@192.168.1.6 sudo shutdown -P now", autoupdate="false"}
Switch		spacecave_pc_setting_all_off						            "Spacecave PC (all off)"							                        <switch>				(g_desktop_spacecave, settings_all_off_selection, g_restore)
Switch		spacecave_pc_turn_on									        "Spacecave PC (Turn on)"							                        <switch>				(g_desktop_spacecave, sf_spacecave)								                                                                { wol="192.168.1.255#00:1b:78:49:70:7c", autoupdate="false" }

Switch		spacecave_pc_fixed_net_online							        "Spacecave PC fixed (net) [%s]"						    	                <network>				(g_desktop_spacecave, sf_spacecave)                                                                                             { channel="network:pingdevice:192_168_1_6:online" }
Number		spacecave_pc_fixed_net_time								        "Spacecave PC fixed (ping) [%.0f ms]"						                <status>				(g_desktop_spacecave, g_chart, g_elastic_mqtt)                                                                                                  { channel="network:pingdevice:192_168_1_6:latency" }
DateTime	spacecave_pc_fixed_net_lastseen					                "Spacecave PC fixed (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"				<calendar>				(g_desktop_spacecave, g_restore)                                                                                                { channel="network:pingdevice:192_168_1_6:lastseen" }


// switch monitor & versterker
Switch		switch_monitor_versterker_net_online					        "Switch monitor & versterker (net) [%s]"				                <network>				(g_sonoff_monitor_versterker, sf_spacecave)								                                                            { channel="network:pingdevice:192_168_1_156:online"}	
Number		switch_monitor_versterker_net_time						        "Switch monitor & versterker (ping) [%.0f ms]"			                <status>				(g_sonoff_monitor_versterker, sf_spacecave, g_chart, g_elastic_mqtt)								                                                { channel="network:pingdevice:192_168_1_156:latency"}	
DateTime	switch_monitor_versterker_net_lastseen				            "Switch monitor & versterker (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"		<calendar>				(g_sonoff_monitor_versterker, g_restore)                                                                                    { channel="network:pingdevice:192_168_1_156:lastseen" }            
Switch  	switch_monitor_versterker_toggle   						        "Switch monitor & versterker (toggle) [%s]"      		                <switch>				(g_sonoff_monitor_versterker, sf_spacecave)								                                                            { mqtt=">[mosquitto:cmnd/sonoff_versterker_monitor/power:command:*:default],      <[mosquitto:stat/sonoff_versterker_monitor/POWER:state:default]" }
String		switch_monitor_versterker_toggle_startup_state			        "Switch monitor & versterker (startup state) [%s]"		                <light> 				(g_sonoff_monitor_versterker, g_maintenance_sonoff_status, g_sonoff_startup_states)	                                                { mqtt="<[mosquitto:stat/sonoff_versterker_monitor/STATUS11:state:JSONPATH($.StatusSTS.POWER)]" }
Switch		switch_monitor_versterker_reachable						        "Switch monitor & versterker (reachable) [%s]"			                <switch>				(g_sonoff_monitor_versterker, sf_spacecave)								                                                            { mqtt="<[mosquitto:tele/sonoff_versterker_monitor/LWT:state:MAP(reachable.map)]" }
Number		switch_monitor_versterker_rssi							        "Switch monitor & versterker (RSSI) [%d %%]"			                <status>				(g_sonoff_monitor_versterker, g_chart, g_elastic_mqtt)						                                                                        { mqtt="<[mosquitto:tele/sonoff_versterker_monitor/STATE:state:JSONPATH($.Wifi.RSSI)]" }	
String		switch_monitor_versterker_action__sonoff_versterker_monitor	    "Switch monitor & versterker (action)"					                <network>				(g_maintenance_sonoff_action)								                                                                        { autoupdate="false" }
String		switch_monitor_versterker_local_fw_version 				        "Switch monitor & versterker (running fw version) [%s]"							                (g_sonoff_monitor_versterker, g_maintenance_sonoff_status, g_sonoff_firmware) 	                                                    { mqtt="<[mosquitto:tele/sonoff_versterker_monitor/INFO1:state:JSONPATH($.Version)], <[mosquitto:stat/sonoff_versterker_monitor/STATUS2:state:JSONPATH($.StatusFWR.Version)]" }
String		switch_monitor_versterker_fw_version 					        "Switch monitor & versterker (fw version) [%s]"									                (g_sonoff_monitor_versterker, g_maintenance_sonoff_status)

// hue lamp spacecave // verplaatst naar kantoor
// Switch		light_spacecave_toggle								            "Hue color Spacecave (switch)"												                        (g_hue_lamp_spacecave, sf_spacecave, lights, scene_all_off)								                                        { channel="hue:0210:0017884775f9:6:color"}
// Switch		light_spacecave_setting_all_off						            "Hue color Spacecave (all off)"												<switch>              (g_hue_lamp_spacecave, settings_all_off_selection, g_restore)
// Dimmer  	light_spacecave_dimmer								            "Hue color Spacecave (dimmer)"												                        (g_hue_lamp_spacecave, sf_spacecave)											                                                { channel="hue:0210:0017884775f9:6:color"}
// Color  		light_spacecave_color								            "Hue color Spacecave (color)"												                            (g_hue_lamp_spacecave, sf_spacecave)											                                            { channel="hue:0210:0017884775f9:6:color"}
// Dimmer 		light_spacecave_colortemp							            "Hue color Spacecave (colortemp)"											                            (g_hue_lamp_spacecave, sf_spacecave)											                                            { channel="hue:0210:0017884775f9:6:color_temperature"}
// String 		light_spacecave_alert								            "Hue color Spacecave (alert)"												                            (g_hue_lamp_spacecave, sf_spacecave)											                                            { channel="hue:0210:0017884775f9:6:alert"}
// Switch 		light_spacecave_effect								            "Hue color Spacecave (effect)"												                        (g_hue_lamp_spacecave, sf_spacecave)											                                                { channel="hue:0210:0017884775f9:6:effect"}

// OPSLAG
// raamsensor opslag
Contact     sensor_opslag_raam_switch_status                           "Raamsensor Opslag (status) [%s]"                                          <door>                  (g_mihome_raamsensor_opslag,sf_storage,g_restore)                                                           { channel="mihome:sensor_magnet_aq2:158d0001de667d:isOpen" }
Number      sensor_opslag_raam_alarm_timer                             "Raamsensor Opslag (alarm timer) [%d]"                                     <clock>                 (g_mihome_raamsensor_opslag,sf_storage)                                                                     { channel="mihome:sensor_magnet_aq2:158d0001de667d:isOpenAlarmTimer" }       // minimum 30 seconds
DateTime    sensor_opslag_raam_last_opened                             "Raamsensor Opslag (Lastopenend) [%1$tY-%1$tm-%1$td  %1$tH:%1$tM]"         <clock-on>              (g_mihome_raamsensor_opslag,sf_storage,g_restore)                                                           { channel="mihome:sensor_magnet_aq2:158d0001de667d:lastOpened" }
Number      sensor_opslag_raam_battery                                 "Raamsensor Opslag (battery) [%d %%]"                                      <battery>               (g_mihome_raamsensor_opslag,sf_storage,g_chart, g_elastic_mqtt)                                                             { channel="mihome:sensor_magnet_aq2:158d0001de667d:batteryLevel" }
Switch      sensor_opslah_raam_battery_low                             "Raamsensor Opslag (battery low) [%s]"                                     <energy>                (g_mihome_raamsensor_opslag,sf_storage)                                                                     { channel="mihome:sensor_magnet_aq2:158d0001de667d:lowBattery" }

// optional binary flag
//Number	SonoffUpgrade-