// ======== METERKAST ========

// // openenergymeter exmonTX meterkast
// Number	    open_energy_meter_emontx3_power1				            "emonTX3 Power1  [%d W]"			                                            (g_controller_emonhub, g_chart)			                                                                                              { mqtt="<[mosquitto:emon/emontx3/power1:state:default]" } 
// Number	    open_energy_meter_emontx3_power2				            "emonTX3 Power2  [%d W]"			                                            (g_controller_emonhub)					                                                                                              { mqtt="<[mosquitto:emon/emontx3/power2:state:default]" }
// Number	    open_energy_meter_emontx3_power3				            "emonTX3 Power3  [%d W]"			                                            (g_controller_emonhub)					                                                                                              { mqtt="<[mosquitto:emon/emontx3/power3:state:default]" }
// Number 	    open_energy_meter_emontx3_power4				            "emonTX3 Power4  [%d W]"			                                            (g_controller_emonhub)					                                                                                              { mqtt="<[mosquitto:emon/emontx3/power4:state:default]" }
// Number	    open_energy_meter_emontx3_vrms				                "emonTX3 Voltage [%.1f VRMS]"		                                            (g_controller_emonhub, g_chart)			                                                                                      { mqtt="<[mosquitto:emon/emontx3/vrms:state:default]" }
// Number      open_energy_meter_emontx3_temp1				                "emonTX3 temp1 [%.1fÂ°C]"			                                            (g_controller_emonhub, g_chart)			                                                                                              { mqtt="<[mosquitto:emon/emontx3/temp1:state:default]" }
// Number	    open_energy_meter_emontx3_pulse				                "emonTX3 pulse [%d]"				                                            (g_controller_emonhub)					                                                                                              { mqtt="<[mosquitto:emon/emontx3/pulse1:state:default]" }
// Number	    open_energy_meter_emontx3_rssi				                "emonTX3 rssi [%d]"				                                                (g_controller_emonhub, g_chart)					                                                                      { mqtt="<[mosquitto:emon/emontx3/rssi:state:default]" }

// // dsmr readings electriciteit en gas 
//     // Thing: P1 device meter 
// String      p1_device_p1_version                                        "P1 Device version [%s]"                                                       (g_meter_energy_gas)                                                                        {channel="dsmr:device_v5:fe7bd8da:dsmr_device_v5:p1_version_output"}
// DateTime    p1_device_timestamp                                         "P1 Device rimestamp [%1$ta %1$tR]"                                            (g_meter_energy_gas)                                                                        {channel="dsmr:device_v5:fe7bd8da:dsmr_device_v5:p1_timestamp"}
// String      p1_device_message                                           "P1 Device text message [%s]"                                                          (g_meter_energy_gas)                                                                        {channel="dsmr:device_v5:fe7bd8da:dsmr_device_v5:p1_text_string"}
    
//     // Thing: P1 electricity meter
// String      p1_electricity_equipment_id                                 "P1 Electricity Equipment identifier [%s]"                                                    (g_meter_energy_gas)                                                      {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_equipment_identifier"}
// Number      p1_electricity_delivery_tariff_low                      	    "P1-E Total meter delivery tariff (Laag) [%.3f kWh]"                                                    (g_meter_energy_gas, g_emoncms_mqtt)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_delivery_tariff1"}
// Number      p1_electricity_total_delivery_tariff_high                   "P1-E Total meter delivery tariff (Hoog) [%.3f kWh]"                                                    (g_meter_energy_gas, g_emoncms_mqtt)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_delivery_tariff2"}
// String      p1_electricity_tariff_indicator                             "P1-E Tariff indicator [%s]"                                                        	(g_meter_energy_gas, g_emoncms_mqtt)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_tariff_indicator"}
// Number      p1_electricity_actual_delivery                              "P1-E Actual power delivery [%.3f kW]"                                                  (g_meter_energy_gas,g_chart, g_emoncms_mqtt)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_actual_delivery"}
// Number      p1_electricity_n_power_failures                             "P1-E Number of power failures [%d]"                                                    (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_power_failures"}
// Number      p1_electricity_n_long_power_failures                        "P1-E Number of long power failures [%d]"                                                    (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_long_power_failures"}
// Number      p1_electricity_n_power_failure_log_entries                  "P1-E Number of power failure log entries [%d]"                                                    (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_power_failure_log_entries"}
// //Number      p1_meter_actual_delivery_to_be_done                       "P1-E Actual power delivery [%.3f kW]"                                                    (g_meter_energy_gas)                                                                        {dsmr="eDatePowerFailureX"} // skip, to be configured later on
// //Number      p1_meter_actual_delivery_to_be_done                       "P1-E Actual power delivery [%.3f kW]"                                                    (g_meter_energy_gas)                                                                        {dsmr="eDurationPowerFailureX"} // skip, to be configured later on
// Number      p1_electricity_voltage_sags_l1                              "P1-E Number of voltage sags L1 [%d]"                                                    (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_voltage_sags_l1"}
// Number      p1_electricity_voltage_swells_l1                            "P1-E Number of voltage swells L1 [%d]"                                                    (g_meter_energy_gas)                                                                   {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_voltage_swells_l1"}
// //String      p1_electricity_version_information_message                "P1-E Version information message [%s]"                                                    (g_meter_energy_gas)                                                                   {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_equipment_identifier"}
// Number      p1_electricity_instant_current_l1                           "P1-E Instant current L1 [%d A]"                                                        (g_meter_energy_gas,g_chart, g_emoncms_mqtt)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_instant_current_l1"}
// Number      p1_electricity_instant_power_delivery_l1                    "P1-E Instant power delivery L1 [%.3f kW]"                                              (g_meter_energy_gas,g_chart, g_emoncms_mqtt)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_instant_power_delivery_l1"}
// Number      p1_electricity_instant_voltage_l1                           "P1-E Instant voltage L1 [%.3f V]"                                                      (g_meter_energy_gas,g_chart, g_emoncms_mqtt)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_instant_voltage_l1"}
// DateTime    p1_electricity_power_failure_0_end                          "P1-E Power failure 0 end [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"                              (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_power_failure_log_timestamp0"}
// Number      p1_electricity_power_failure_0_duration                     "P1-E Power failure 0 duration [%d]"                                                    (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_power_failure_log_duration0"}
// DateTime    p1_electricity_power_failure_1_end                          "P1-E Power failure 1 end [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"                              (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_power_failure_log_timestamp1"}
// Number      p1_electricity_power_failure_1_duration                     "P1-E Power failure 1 duration [%d]"                                                    (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_power_failure_log_duration1"}
// DateTime    p1_electricity_power_failure_2_end                          "P1-E Power failure 2 end [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"                              (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_power_failure_log_timestamp2"}
// Number      p1_electricity_power_failure_2_duration                     "P1-E Power failure 2 duration [%d]"                                                    (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_power_failure_log_duration2"}
// DateTime    p1_electricity_power_failure_3_end                          "P1-E Power failure 3 end [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"                                               (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_power_failure_log_timestamp3"}
// Number      p1_electricity_power_failure_3_duration                     "P1-E Power failure 3 duration [%d]"                                                    (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_power_failure_log_duration3"}
// DateTime    p1_electricity_power_failure_4_end                          "P1-E Power failure 4 end [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"                                               (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_power_failure_log_timestamp4"}
// Number      p1_electricity_power_failure_4_duration                     "P1-E Power failure 4 duration [%d]"                                                    (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_power_failure_log_duration4"}
// DateTime    p1_electricity_power_failure_5_end                          "P1-E Power failure 5 end [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"                                               (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_power_failure_log_timestamp5"}
// Number      p1_electricity_power_failure_5_duration                     "P1-E Power failure 5 duration [%d]"                                                    (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_power_failure_log_duration5"}
// DateTime    p1_electricity_power_failure_6_end                          "P1-E Power failure 6 end [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"                                               (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_power_failure_log_timestamp6"}
// Number      p1_electricity_power_failure_6_duration                     "P1-E Power failure 6 duration [%d]"                                                    (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_power_failure_log_duration6"}
// DateTime    p1_electricity_power_failure_7_end                          "P1-E Power failure 7 end [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"                                               (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_power_failure_log_timestamp7"}
// Number      p1_electricity_power_failure_7_duration                     "P1-E Power failure 7 duration [%d]"                                                    (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_power_failure_log_duration7"}
// DateTime    p1_electricity_power_failure_8_end                          "P1-E Power failure 8 end [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"                                                      (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_power_failure_log_timestamp8"}
// Number      p1_electricity_power_failure_8_duration                     "P1-E Power failure 8 duration [%d]"                                                                            (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_power_failure_log_duration8"}
// DateTime    p1_electricity_power_failure_9_end                          "P1-E Power failure 9 end [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"                                                      (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_power_failure_log_timestamp9"}
// Number      p1_electricity_power_failure_9_duration                     "P1-E Power failure 9 duration [%d]"                                                                            (g_meter_energy_gas)                                                                        {channel="dsmr:electricity_v5_0:fe7bd8da:dsmr_electricity_v5:emeter_power_failure_log_duration9"}

//     // Thing: P1 gas meter
// String      p1_gas_device_type                                          "P1 Gas Device type [%s]"                                                                                       (g_meter_energy_gas)                                                        {channel="dsmr:m3_v5_0:fe7bd8da:dsmr_gas_v5:meter_device_type"}
// String      p1_gas_equipment_id                                         "P1 Gas Equipment identifier [%s]"                                                                              (g_meter_energy_gas)                                                        {channel="dsmr:m3_v5_0:fe7bd8da:dsmr_gas_v5:meter_equipment_identifier"}
// DateTime    p1_gas_total_value_timestamp                                "P1 Gas Timestamp of the last measurement [%1$ta %1$tR]"                                                        (g_meter_energy_gas)                                               {channel="dsmr:m3_v5_0:fe7bd8da:dsmr_gas_v5:m3meter_value_timestamp"}
// Number      p1_gas_total_value                                          "P1 Gas Meterstand (Gas) [%.3f m3]"                                                     <gas>                   (g_meter_energy_gas, g_chart, g_emoncms_mqtt)                                                                   {channel="dsmr:m3_v5_0:fe7bd8da:dsmr_gas_v5:m3meter_value"}

// openhab server
Switch		openhab_service_net_online								    "OpenHAB service (net) [%s]"						                                    <network>				(g_server_openhab, gf_corridor)                                                                                                             { channel="network:pingdevice:192_168_1_203:online" } 
Number		openhab_service_net_time								    "OpenHAB service (ping) [%.0f ms]"					                                    <status>				(g_server_openhab, gf_corridor,g_chart)                                                                                                     { channel="network:pingdevice:192_168_1_203:latency" } 
DateTime	openhab_service_net_lastseen							    "OpenHAB service (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"				            <status>				(g_server_openhab, gf_corridor, g_restore)                                                                                                  { channel="network:pingdevice:192_168_1_203:lastseen" }

Switch		openhab_service_unifi_online	                            "OpenHAB service (U-online) [MAP(unifi.map):%s]"	                                    <switch>			    (g_server_openhab)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_device_domotica_03:online" }
String		openhab_service_unifi_site	                                "OpenHAB service (U-site)"	                                                            <network>			    (g_server_openhab)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_device_domotica_03:site" }
String		openhab_service_unifi_ap	                                "OpenHAB service (U-ap)"                    	                                        <network>			    (g_server_openhab)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_device_domotica_03:ap" }
String		openhab_service_unifi_essid	                                "OpenHAB service (U-essid)"	                                                            <chart>			        (g_server_openhab)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_device_domotica_03:essid" }
Number		openhab_service_unifi_rssi	                                "OpenHAB service (U-RSSI) [%s]"						                                    <qualityofservice>	    (g_server_openhab)	                                                                                                                        { channel="unifi:client:unifi_thuis:unifi_device_domotica_03:rssi" } 
Number		openhab_service_unifi_uptime	                            "OpenHAB service (U-Uptime) [%d]"						                                <time>				    (g_server_openhab)	                                                                                                                        { channel="unifi:client:unifi_thuis:unifi_device_domotica_03:uptime" }
DateTime	openhab_service_unifi_lastseen                              "OpenHAB service (U-LastSeen) [%1$tH:%1$tM:%1$tS]"                                 	    <time>	                (g_server_openhab)	                                                                                                                        { channel="unifi:client:unifi_thuis:unifi_device_domotica_03:lastSeen" }

// mysensors gateway
Switch		mysensors_gateway_net_online							    "Mysensors gateway (net) [%s]"						                                    <network>				(g_arduino_mysensors_gateway, gf_corridor)                                                                                                  { channel="network:pingdevice:192_168_1_200:online" } 
Number		mysensors_gateway_net_time								    "Mysensors gateway (ping) [%.0f ms]"				        	                        <status>				(g_arduino_mysensors_gateway, gf_corridor,g_chart)                                                                                          { channel="network:pingdevice:192_168_1_200:latency" } 
DateTime	mysensors_gateway_net_lastseen							    "Mysensors gateway (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"				            <status>				(g_arduino_mysensors_gateway, gf_corridor, g_restore)                                                                                       { channel="network:pingdevice:192_168_1_200:lastseen" }

// deurbel
Switch		switch_deurbel_net_online								    "Deurbel (net) [%s]"								                                    <network>				(g_sonoff_deurbel)                                                                                                                          { channel="network:pingdevice:192_168_1_164:online" }
Number		switch_deurbel_net_time								        "Deurbel (ping) [%.0f ms]"						                                        <status>				(g_sonoff_deurbel,g_chart)                                                                                                                  { channel="network:pingdevice:192_168_1_164:latency" }
DateTime	switch_deurbel_net_lastseen							        "Deurbel (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"					                <status>				(g_sonoff_deurbel)                                                                                                                          { channel="network:pingdevice:192_168_1_164:lastseen" }

Switch		switch_deurbel_toggle									    "Deurbel (switch) [%s]"							                                        <light> 				(g_sonoff_deurbel, gf_corridor)					                                                                                            { mqtt=">[mosquitto:cmnd/sonoff_switch_deurbel/power:command:*:default], <[mosquitto:stat/sonoff_switch_deurbel/POWER:state:default]" }
String		switch_deurbel_toggle_startup_state					        "Deurbel (startup state) [%s]"					                                        <light> 				(g_sonoff_deurbel, gf_corridor,g_maintenance_sonoff_status, g_sonoff_startup_states)					                                    { mqtt="<[mosquitto:stat/sonoff_switch_deurbel/STATUS11:state:JSONPATH($.StatusSTS.POWER)]" }
String 		switch_deurbel_reachable								    "Deurbel (reachable) [%s]"						                                        <switch>				(g_sonoff_deurbel)								                                                                                            { mqtt="<[mosquitto:tele/sonoff_switch_deurbel/LWT:state:MAP(reachable.map)]" }
String		switch_deurbel_rssi									        "Deurbel (RSSI) [%d %%]"							                                    <status>				(g_sonoff_deurbel, g_chart)								                                                                                    { mqtt="<[mosquitto:tele/sonoff_switch_deurbel/STATE:state:JSONPATH($.Wifi.RSSI)]" }
String		switch_deurbel_action__sonoff_switch_deurbel    	        "Deurbel (action)"								                                        <network>				(g_maintenance_sonoff_action) 					                                                                                            { autoupdate="false" }
String		switch_deurbel_local_fw_version 						    "Deurbel (running fw version) [%s]"										                                        (g_sonoff_deurbel, g_maintenance_sonoff_status, g_sonoff_firmware)			                                                                { mqtt="<[mosquitto:tele/sonoff_switch_deurbel/INFO1:state:JSONPATH($.Version)],<[mosquitto:stat/sonoff_switch_deurbel/STATUS2:state:JSONPATH($.StatusFWR.Version)]" }
String		switch_deurbel_fw_version 							        "Deurbel (fw version) [%s]"												                                        (g_sonoff_deurbel, g_maintenance_sonoff_status)

Switch		switch_deurbel_unifi_online	                                "Deurbel (U-online) [MAP(unifi.map):%s]"	                                            <switch>			    (g_sonoff_deurbel)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_switch_deurbel:online" }
String		switch_deurbel_unifi_site	                                "Deurbel (U-site)"	                                                                    <network>			    (g_sonoff_deurbel)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_switch_deurbel:site" }
String		switch_deurbel_unifi_ap	                                    "Deurbel (U-ap)"                    	                                                <network>			    (g_sonoff_deurbel)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_switch_deurbel:ap" }
String		switch_deurbel_unifi_essid	                                "Deurbel (U-essid)"	                                                                    <chart>			        (g_sonoff_deurbel)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_switch_deurbel:essid" }
Number		switch_deurbel_unifi_rssi	                                "Deurbel (U-RSSI) [%s]"						                                            <qualityofservice>	    (g_sonoff_deurbel)	                                                                                                                        { channel="unifi:client:unifi_thuis:unifi_sonoff_switch_deurbel:rssi" } 
Number		switch_deurbel_unifi_uptime	                                "Deurbel (U-Uptime) [%d]"						                                        <time>				    (g_sonoff_deurbel)	                                                                                                                        { channel="unifi:client:unifi_thuis:unifi_sonoff_switch_deurbel:uptime" }
DateTime	switch_deurbel_unifi_lastseen                               "Deurbel (U-LastSeen) [%1$tH:%1$tM:%1$tS]"                                 	            <time>	                (g_sonoff_deurbel)	                                                                                                                        { channel="unifi:client:unifi_thuis:unifi_sonoff_switch_deurbel:lastSeen" }

// Xiaomi Window Switch voordeur
Contact     sensor_voordeur_switch_status                               "Deursensor voordeur (status) [%s]"                                                     <frontdoor>             (g_mihome_doorsensor_voordeur,gf_corridor,g_restore)                                                        ["iss:room:Begane grond"]       { channel="mihome:sensor_magnet:158d00016fd9b1:isOpen" }
Number      sensor_voordeur_alarm_timer                                 "Deursensor voordeur (alarm timer) [%d]"                                                <clock>                 (g_mihome_doorsensor_voordeur,gf_corridor)                                                                                                  { channel="mihome:sensor_magnet:158d00016fd9b1:isOpenAlarmTimer" }       // minimum 30 seconds
DateTime    sensor_voordeur_last_opened                                 "Deursensor voordeur (Lastopenend) [%1$tY-%1$tm-%1$td %1$tH:%1$tM]"                     <clock-on>              (g_mihome_doorsensor_voordeur,gf_corridor,g_restore)                                                                                        { channel="mihome:sensor_magnet:158d00016fd9b1:lastOpened" }
Number      sensor_voordeur_battery                                     "Deursensor voordeur (battery) [%d %%]"                                                 <battery>               (g_mihome_doorsensor_voordeur,gf_corridor,g_chart)                                                                                          { channel="mihome:sensor_magnet:158d00016fd9b1:batteryLevel" }
Switch      sensor_voordeur_battery_low                                 "Deursensor voordeur (battery low) [%s]"                                                <energy>                (g_mihome_doorsensor_voordeur,gf_corridor)                                                                                                  { channel="mihome:sensor_magnet:158d00016fd9b1:lowBattery" }

// bewegingssensor gang-voordeur
Switch      sensor_motion_gang_voordeur_motion_status                   "Bewegingssensor gang-voordeur (status) [%s]"                                           <motion>                (g_mihome_motionsensor_gang_voordeur, gf_corridor)                                                                                          { channel="mihome:sensor_motion_aq2:158d00022515ed:motion" }
Number      sensor_motion_gang_voordeur_motion_timer                    "Bewegingssensor gang-voordeur (timer) [%d]"                                            <clock>                 (g_mihome_motionsensor_gang_voordeur)                                                                                                       { channel="mihome:sensor_motion_aq2:158d00022515ed:motionOffTimer" }      // minimum 5 seconds - remember that the sensor only triggers every minute to save energy
DateTime    sensor_motion_gang_voordeur_last_motion                     "Bewegingssensor gang-voordeur (last motion) [%1$tY-%1$tm-%1$td %1$tH:%1$tM]"           <motion>                (g_mihome_motionsensor_gang_voordeur, gf_corridor, g_restore, g_lastupdate)                                                                 { channel="mihome:sensor_motion_aq2:158d00022515ed:lastMotion" }
Number      sensor_motion_gang_voordeur_battery                         "Bewegingssensor gang-voordeur (battery) [%d %%]"                                       <battery>               (g_mihome_motionsensor_gang_voordeur, gf_corridor, g_chart)                                                                                 { channel="mihome:sensor_motion_aq2:158d00022515ed:batteryLevel" }
Switch      sensor_motion_gang_voordeur_battery_low                     "Bewegingssensor gang-voordeur (battery low) [%s]"                                      <energy>                (g_mihome_motionsensor_gang_voordeur, gf_corridor)                                                                                          { channel="mihome:sensor_motion_aq2:158d00022515ed:lowBattery" }
Number      sensor_motion_gang_voordeur_illumination                    "Bewegingssensor gang-voordeur (illumination) [%s lux]"                                 <battery>               (g_mihome_motionsensor_gang_voordeur, g_chart, gf_corridor)                                                                                 { channel="mihome:sensor_motion_aq2:158d00022515ed:illumination" }

// bewegingssensor gang-woonkamer
Switch      sensor_motion_gang_woonkamer_motion_status                  "Bewegingssensor gang-woonkamer (status) [%s]"                                          <motion>                (g_mihome_motionsensor_gang_woonkamer, gf_corridor)                                                                                         { channel="mihome:sensor_motion_aq2:158d0001e52d75:motion" }
Number      sensor_motion_gang_woonkamer_motion_timer                   "Bewegingssensor gang-woonkamer (timer) [%d]"                                           <clock>                 (g_mihome_motionsensor_gang_woonkamer)                                                                                                      { channel="mihome:sensor_motion_aq2:158d0001e52d75:motionOffTimer" }      // minimum 5 seconds - remember that the sensor only triggers every minute to save energy
DateTime    sensor_motion_gang_woonkamer_last_motion                    "Bewegingssensor gang-woonkamer (last motion) [%1$tY-%1$tm-%1$td %1$tH:%1$tM]"          <motion>                (g_mihome_motionsensor_gang_woonkamer, gf_corridor, g_restore, g_lastupdate)                                                                { channel="mihome:sensor_motion_aq2:158d0001e52d75:lastMotion" }
Number      sensor_motion_gang_woonkamer_battery                        "Bewegingssensor gang-woonkamer (battery) [%d %%]"                                      <battery>               (g_mihome_motionsensor_gang_woonkamer, gf_corridor, g_chart)                                                                                { channel="mihome:sensor_motion_aq2:158d0001e52d75:batteryLevel" }
Switch      sensor_motion_gang_woonkamer_battery_low                    "Bewegingssensor gang-woonkamer (battery low) [%s]"                                     <energy>                (g_mihome_motionsensor_gang_woonkamer, gf_corridor)                                                                                         { channel="mihome:sensor_motion_aq2:158d0001e52d75:lowBattery" }
Number      sensor_motion_gang_woonkamer_illumination                   "Bewegingssensor gang-woonkamer (illumination) [%s lux]"                                <battery>               (g_mihome_motionsensor_gang_woonkamer, g_chart, gf_corridor)                                                                                { channel="mihome:sensor_motion_aq2:158d0001e52d75:illumination" }

// bewegingssensor woonkamer-gang
Switch      sensor_motion_woonkamer_gang_motion_status                  "Bewegingssensor woonkamer-gang (status) [%s]"                                          <motion>                (g_mihome_motionsensor_woonkamer_gang, gf_living)                                                                                           { channel="mihome:sensor_motion_aq2:158d0001e465e7:motion" }
Number      sensor_motion_woonkamer_gang_motion_timer                   "Bewegingssensor woonkamer-gang (timer) [%d]"                                           <clock>                 (g_mihome_motionsensor_woonkamer_gang)                                                                                                      { channel="mihome:sensor_motion_aq2:158d0001e465e7:motionOffTimer" }      // minimum 5 seconds - remember that the sensor only triggers every minute to save energy
DateTime    sensor_motion_woonkamer_gang_last_motion                    "Bewegingssensor woonkamer-gang (last motion) [%1$tY-%1$tm-%1$td %1$tH:%1$tM]"          <motion>                (g_mihome_motionsensor_woonkamer_gang, gf_living, g_restore, g_lastupdate)                                                                  { channel="mihome:sensor_motion_aq2:158d0001e465e7:lastMotion" }
Number      sensor_motion_woonkamer_gang_battery                        "Bewegingssensor woonkamer-gang (battery) [%d %%]"                                      <battery>               (g_mihome_motionsensor_woonkamer_gang, gf_living, g_chart)                                                                                  { channel="mihome:sensor_motion_aq2:158d0001e465e7:batteryLevel" }
Switch      sensor_motion_woonkamer_gang_battery_low                    "Bewegingssensor woonkamer-gang (battery low) [%s]"                                     <energy>                (g_mihome_motionsensor_woonkamer_gang, gf_living)                                                                                           { channel="mihome:sensor_motion_aq2:158d0001e465e7:lowBattery" }
Number      sensor_motion_woonkamer_gang_illumination                   "Bewegingssensor woonkamer-gang (illumination) [%s lux]"                                <battery>               (g_mihome_motionsensor_woonkamer_gang, g_chart, gf_living)                                                                                  { channel="mihome:sensor_motion_aq2:158d0001e465e7:illumination" }

// Xiaomi Window Switch toilet bg
Contact     sensor_toilet_bg_switch_status                              "Deursensor toilet bg (status) [%s]"                                                    <door>                  (g_mihome_doorsensor_toilet_bg,gf_bathroom,g_restore)                                                       ["iss:room:Begane grond"]       { channel="mihome:sensor_magnet:158d0001c03820:isOpen" }
Number      sensor_toilet_bg_alarm_timer                                "Deursensor toilet bg (alarm timer) [%d]"                                               <clock>                 (g_mihome_doorsensor_toilet_bg,gf_bathroom)                                                                                                 { channel="mihome:sensor_magnet:158d0001c03820:isOpenAlarmTimer" }       // minimum 30 seconds
DateTime    sensor_toilet_bg_last_opened                                "Deursensor toilet bg (Lastopenend) [%1$tY-%1$tm-%1$td  %1$tH:%1$tM]"                   <clock-on>              (g_mihome_doorsensor_toilet_bg,gf_bathroom,g_restore)                                                                                       { channel="mihome:sensor_magnet:158d0001c03820:lastOpened" }
Number      sensor_toilet_bg_battery                                    "Deursensor toilet bg (battery) [%d %%]"                                                <battery>               (g_mihome_doorsensor_toilet_bg,gf_bathroom,g_chart)                                                                                         { channel="mihome:sensor_magnet:158d0001c03820:batteryLevel" }
Switch      sensor_toilet_bg_battery_low                                "Deursensor toilet bg (battery low) [%s]"                                               <energy>                (g_mihome_doorsensor_toilet_bg,gf_bathroom)                                                                                                 { channel="mihome:sensor_magnet:158d0001c03820:lowBattery" }

// Xiaomi Window Switch achterdeur
Contact     sensor_achterdeur_switch_status                             "Deursensor achterdeur (status) [%s]"                                                   <frontdoor>             (g_mihome_doorsensor_achterdeur,gf_living,g_restore)                                                        ["iss:room:Begane grond"]       { channel="mihome:sensor_magnet:158d0001d825c0:isOpen" }
Number      sensor_achterdeur_alarm_timer                               "Deursensor achterdeur (alarm timer) [%d]"                                              <clock>                 (g_mihome_doorsensor_achterdeur,gf_living)                                                                                                  { channel="mihome:sensor_magnet:158d0001d825c0:isOpenAlarmTimer" }       // minimum 30 seconds
DateTime    sensor_achterdeur_last_opened                               "Deursensor achterdeur (Lastopenend) [%1$tY-%1$tm-%1$td  %1$tH:%1$tM]"                  <clock-on>              (g_mihome_doorsensor_achterdeur,gf_living,g_restore)                                                                                        { channel="mihome:sensor_magnet:158d0001d825c0:lastOpened" }
Number      sensor_achterdeur_battery                                   "Deursensor achterdeur (battery) [%d %%]"                                               <battery>               (g_mihome_doorsensor_achterdeur,gf_living,g_chart)                                                                                          { channel="mihome:sensor_magnet:158d0001d825c0:batteryLevel" }
Switch      sensor_achterdeur_battery_low                               "Deursensor achterdeur (battery low) [%s]"                                              <energy>                (g_mihome_doorsensor_achterdeur,gf_living)                                                                                                  { channel="mihome:sensor_magnet:158d0001d825c0:lowBattery" }

// Xiaomi Window Switch schuifpui
Contact     sensor_schuifpui_switch_status                             "Deursensor schuifpui (status) [%s]"                                                   <frontdoor>             (g_mihome_doorsensor_schuifpui,gf_living,g_restore)                                                        ["iss:room:Begane grond"]       { channel="mihome:sensor_magnet:158d0001e74bcc:isOpen" }
Number      sensor_schuifpui_alarm_timer                               "Deursensor schuifpui (alarm timer) [%d]"                                              <clock>                 (g_mihome_doorsensor_schuifpui,gf_living)                                                                                                  { channel="mihome:sensor_magnet:158d0001e74bcc:isOpenAlarmTimer" }       // minimum 30 seconds
DateTime    sensor_schuifpui_last_opened                               "Deursensor schuifpui (Lastopenend) [%1$tY-%1$tm-%1$td  %1$tH:%1$tM]"                  <clock-on>              (g_mihome_doorsensor_schuifpui,gf_living,g_restore)                                                                                        { channel="mihome:sensor_magnet:158d0001e74bcc:lastOpened" }
Number      sensor_schuifpui_battery                                   "Deursensor schuifpui (battery) [%d %%]"                                               <battery>               (g_mihome_doorsensor_schuifpui,gf_living,g_chart)                                                                                          { channel="mihome:sensor_magnet:158d0001e74bcc:batteryLevel" }
Switch      sensor_schuifpui_battery_low                               "Deursensor schuifpui (battery low) [%s]"                                              <energy>                (g_mihome_doorsensor_schuifpui,gf_living)                                                                                                  { channel="mihome:sensor_magnet:158d0001e74bcc:lowBattery" }


// Xiaomi Switch - see "xiaomi.rules" for action triggers (Keuken)
Number     switch_all_off_rick_battery                                       "Switch lamp eettafel  (battery)"                                                  <battery>               (g_mihome_switch_eettafel, g_restore, g_chart)                                                               { channel="mihome:sensor_switch_aq2:158d0002134994:batteryLevel" }
Switch     switch_all_off_rick_battery_low                                   "Switch lamp eettafel  (battery-low)"                                              <energy>                (g_mihome_switch_eettafel, g_restore)                                                                        { channel="mihome:sensor_switch_aq2:158d0002134994:lowBattery" }


// Xiaomi Aqara temp/humid/pressure sensor
Number      sensor_weather_keuken_temperature                           "Weersensor keuken (temperature) [%.1f Â°C]"                                             <temperature>           (g_mihome_weathersensor_keuken,gf_living,g_chart)                                                           ["iss:room:Begane grond"]       { channel="mihome:sensor_weather_v1:158d0001e41223:temperature" }
Number      sensor_weather_keuken_humidity                              "Weersensor keuken (humidity) [%.1f %%]"                                                <humidity>              (g_mihome_weathersensor_keuken,gf_living,g_chart)                                                           ["iss:room:Begane grond"]       { channel="mihome:sensor_weather_v1:158d0001e41223:humidity" }
Number      sensor_weather_keuken_pressure                              "Weersensor keuken (pressure) [%.3f]"                                                   <temperature>           (g_mihome_weathersensor_keuken,gf_living,g_chart)                                                           ["iss:room:Begane grond"]       { channel="mihome:sensor_weather_v1:158d0001e41223:pressure" }
Number      sensor_weather_keuken_battery                               "Weersensor keuken (battery) [%d %%]"                                                   <battery>               (g_mihome_weathersensor_keuken,gf_living,g_chart)                                                                                           { channel="mihome:sensor_weather_v1:158d0001e41223:batteryLevel" }
Switch      sensor_weather_keuken_battery_low                           "Weersensor keuken (battery low) [%s]"                                                  <energy>                (g_mihome_weathersensor_keuken,gf_living)                                                                                                   { channel="mihome:sensor_weather_v1:158d0001e41223:lowBattery" }

// Eettafel lamp
Switch		light_eettafel_net_online								    "Plafondlamp eettafel (net) [%s]"						                                <network>               (g_lifx_lamp_eettafel, gf_living)                                                                                                           { channel="network:pingdevice:192_168_1_171:online"}
Number		light_eettafel_net_time								        "Plafondlamp eettafel (ping) [%.0f ms]"					                                <status>                (g_lifx_lamp_eettafel, gf_living, g_chart)                                                                                                  { channel="network:pingdevice:192_168_1_171:latency"}
DateTime	light_eettafel_net_lastseen							        "Plafondlamp eettafel (ping) (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"	            <status>            	(g_lifx_lamp_eettafel, gf_living, g_restore)                                                                                                { channel="network:pingdevice:192_168_1_171:lastseen"}

Switch      light_eettafel_toggle                                       "Plafondlamp eettafel (switch)"								                            <light>                 (g_lifx_lamp_eettafel, gf_living, lights, scene_all_off)                                                                                    { channel="lifx:colorlight:D073D5243284:color" }
Switch		light_eettafel_setting_all_off						        "Plafondlamp eettafel (all off)"											            <switch>                (g_lifx_lamp_eettafel, settings_all_off_selection, g_restore)
Color       light_eettafel_color                                        "Plafondlamp eettafel (color)"                                                          <colorpicker>           (g_lifx_lamp_eettafel, gf_living)                                                                                                           { channel="lifx:colorlight:D073D5243284:color" }
Dimmer      light_eettafel_dimmer                                       "Plafondlamp eettafel (dimmer)"                                                         <slider>                (g_lifx_lamp_eettafel, gf_living)                                                                                                           { channel="lifx:colorlight:D073D5243284:color" }
Dimmer      light_eettafel_colortemp                                    "Plafondlamp eettafel (colortemp)"                                                      <temperature>           (g_lifx_lamp_eettafel, gf_living)                                                                                                           { channel="lifx:colorlight:D073D5243284:temperature" }
Number      light_eettafel_signal_strength                              "Plafondlamp eettafel (signal strength)"                                                <status>                (g_lifx_lamp_eettafel, gf_living, g_chart)                                                                                                  { channel="lifx:colorlight:D073D5243284:signalstrength" }

Switch		light_eettafel_unifi_online	                                "Plafondlamp eettafel (U-online) [MAP(unifi.map):%s]"	                                <switch>			    (g_lifx_lamp_eettafel)                                                                  	                                                { channel="unifi:client:unifi_thuis:unifi_light_lifx_eettafel:online" }
String		light_eettafel_unifi_site	                                "Plafondlamp eettafel (U-site)"	                                                        <network>			    (g_lifx_lamp_eettafel)                                                                  	                                                { channel="unifi:client:unifi_thuis:unifi_light_lifx_eettafel:site" }
String		light_eettafel_unifi_ap	                                    "Plafondlamp eettafel (U-ap)"                    	                                    <network>			    (g_lifx_lamp_eettafel)                                                                  	                                                { channel="unifi:client:unifi_thuis:unifi_light_lifx_eettafel:ap" }
String		light_eettafel_unifi_essid	                                "Plafondlamp eettafel (U-essid)"	                                                    <chart>			        (g_lifx_lamp_eettafel)                                                                  	                                                { channel="unifi:client:unifi_thuis:unifi_light_lifx_eettafel:essid" }
Number		light_eettafel_unifi_rssi	                                "Plafondlamp eettafel (U-RSSI) [%d]"						                            <qualityofservice>	    (g_lifx_lamp_eettafel)	                                                                                                                    { channel="unifi:client:unifi_thuis:unifi_light_lifx_eettafel:rssi" } 
Number		light_eettafel_unifi_uptime	                                "Plafondlamp eettafel (U-Uptime) [%d]"						                            <time>				    (g_lifx_lamp_eettafel)	                                                                                                                    { channel="unifi:client:unifi_thuis:unifi_light_lifx_eettafel:uptime" }
DateTime	light_eettafel_unifi_lastseen                               "Plafondlamp eettafel (U-LastSeen) [%1$tH:%1$tM:%1$tS]"                                 <time>	                (g_lifx_lamp_eettafel)	                                                                                                                    { channel="unifi:client:unifi_thuis:unifi_light_lifx_eettafel:lastSeen" }


// UPC Horizon box
String		upc_horizon_box_status									    "UPC Horizon box (aggregated)"												                                    (g_router_horizon, gf_living)
Switch		upc_horizon_box_net_online								    "UPC Horizon box (net) [%s]"						                                    <network>               (g_router_horizon, gf_living)                                                                                                               { channel="network:pingdevice:192_168_1_3:online" }
Number		upc_horizon_box_net_time								    "UPC Horizon box (ping) [%.0f ms]"					                                    <status>                (g_router_horizon, gf_living, g_chart)                                                                                                      { channel="network:pingdevice:192_168_1_3:latency" }
DateTime	upc_horizon_box_net_lastseen							    "UPC Horizon box (ping) (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"			            <status>            	(g_router_horizon, gf_living, g_restore)                                                                                                    { channel="network:pingdevice:192_168_1_3:lastseen" }

Switch		upc_horizon_box_harmony_hub								    "UPC Horizon box (hub) [%s]"						                                    <switch>				(g_router_horizon, gf_living)
String      upc_horizon_box_harmony_hub_button_press                    "UPC Horizon box (hub) button press"                                                                                                                                                                                                                        { channel="harmonyhub:device:Woonkamer:upc_horizon:buttonPress" }

Switch		upc_horizon_box_unifi_online	                            "UPC Horizon box (U-online) [MAP(unifi.map):%s]"	                                    <switch>			    (g_router_horizon)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_device_ziggo_horizon:online" }
String		upc_horizon_box_unifi_site	                                "UPC Horizon box (U-site)"	                                                            <network>			    (g_router_horizon)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_device_ziggo_horizon:site" }
String		upc_horizon_box_unifi_ap	                                "UPC Horizon box (U-ap)"                    	                                        <network>			    (g_router_horizon)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_device_ziggo_horizon:ap" }
String		upc_horizon_box_unifi_essid	                                "UPC Horizon box (U-essid)"	                                                            <chart>			        (g_router_horizon)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_device_ziggo_horizon:essid" }
Number		upc_horizon_box_unifi_rssi	                                "UPC Horizon box (U-RSSI) [%d]"						                                    <qualityofservice>	    (g_router_horizon)	                                                                                                                        { channel="unifi:client:unifi_thuis:unifi_device_ziggo_horizon:rssi" } 
Number		upc_horizon_box_unifi_uptime	                            "UPC Horizon box (U-Uptime) [%d]"						                                <time>				    (g_router_horizon)	                                                                                                                        { channel="unifi:client:unifi_thuis:unifi_device_ziggo_horizon:uptime" }
DateTime	upc_horizon_box_unifi_lastseen                              "UPC Horizon box (U-LastSeen) [%1$tH:%1$tM:%1$tS]"                                 	    <time>	                (g_router_horizon)	                                                                                                                        { channel="unifi:client:unifi_thuis:unifi_device_ziggo_horizon:lastSeen" }


// harmony hub
Switch		logitech_harmony_hub_net_online							    "Logitech Harmony Hub (net) [%s]"					                                    <network>				(g_controller_harmony_hub)                                                                                                                  { channel="network:pingdevice:192_168_1_80:online"}
Number		logitech_harmony_hub_net_time							    "Logitech Harmony Hub (ping) [%.0f ms]"				                                    <status>				(g_controller_harmony_hub,g_chart)                                                                                                          { channel="network:pingdevice:192_168_1_80:latency"}
DateTime	logitech_harmony_hub_net_lastseen						    "Logitech Harmony Hub (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"				        <status>				(g_controller_harmony_hub, g_restore)                                                                                                       { channel="network:pingdevice:192_168_1_80:lastseen"}
String 		logitech_harmony_hub_current_activity					    "Logitech Harmony Hub (activiteit) [%s]" 			                                    <television> 			(g_controller_harmony_hub) 										                                                                            { channel="harmonyhub:hub:Woonkamer:currentActivity"}
Switch 		logitech_harmony_hub_toggle								    "Logitech Harmony Hub turn off (toggle) [%s]"								                                    (g_controller_harmony_hub, scene_all_off)
Switch 		logitech_harmony_hub_setting_all_off    				    "Logitech Harmony Hub (all off)"	    			                                    <switch>				(g_controller_harmony_hub, settings_all_off_selection)
Switch 		logitech_harmony_hub_status								    "Logitech Harmony Hub status [%s]"					                                    <television>			(g_controller_harmony_hub)

Switch		logitech_harmony_hub_unifi_online	                        "Logitech Harmony Hub (U-online) [MAP(unifi.map):%s]"	                                <switch>			    (g_controller_harmony_hub)                                                                  	                                            { channel="unifi:client:unifi_thuis:unifi_controller_logitech_harmony_hub:online" }
String		logitech_harmony_hub_unifi_site	                            "Logitech Harmony Hub (U-site)"	                                                        <network>			    (g_controller_harmony_hub)                                                                  	                                            { channel="unifi:client:unifi_thuis:unifi_controller_logitech_harmony_hub:site" }
String		logitech_harmony_hub_unifi_ap	                            "Logitech Harmony Hub (U-ap)"                    	                                    <network>			    (g_controller_harmony_hub)                                                                  	                                            { channel="unifi:client:unifi_thuis:unifi_controller_logitech_harmony_hub:ap" }
String		logitech_harmony_hub_unifi_essid	                        "Logitech Harmony Hub (U-essid)"	                                                    <chart>			        (g_controller_harmony_hub)                                                                  	                                            { channel="unifi:client:unifi_thuis:unifi_controller_logitech_harmony_hub:essid" }
Number		logitech_harmony_hub_unifi_rssi	                            "Logitech Harmony Hub (U-RSSI) [%s]"						                            <qualityofservice>	    (g_controller_harmony_hub)	                                                                                                                { channel="unifi:client:unifi_thuis:unifi_controller_logitech_harmony_hub:rssi" } 
Number		logitech_harmony_hub_unifi_uptime	                        "Logitech Harmony Hub (U-Uptime) [%d]"						                            <time>				    (g_controller_harmony_hub)	                                                                                                                { channel="unifi:client:unifi_thuis:unifi_controller_logitech_harmony_hub:uptime" }
DateTime	logitech_harmony_hub_unifi_lastseen                         "Logitech Harmony Hub (U-LastSeen) [%1$tH:%1$tM:%1$tS]"                                 <time>	                (g_controller_harmony_hub)	                                                                                                                { channel="unifi:client:unifi_thuis:unifi_controller_logitech_harmony_hub:lastSeen" }

// Philips Hue Bridge
Switch		philips_hue_bridge_net_online							    "Philips Hue Bridge (net) [%s]"						                                    <network>				(g_controller_hue_bridge, gf_living)                                                                                                        { channel="network:pingdevice:192_168_1_81:online"}
Number		philips_hue_bridge_net_time								    "Philips Hue Bridge (ping) [%.0f ms]"				                                    <status>				(g_controller_hue_bridge, g_chart)                                                                                                          { channel="network:pingdevice:192_168_1_81:latency"}
DateTime	philips_hue_bridge_net_lastseen							    "Philips Hue Bridge (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"				            <status>				(g_controller_hue_bridge, gf_living, g_restore)                                                                                             { channel="network:pingdevice:192_168_1_81:lastseen"}

Switch		philips_hue_bridge_unifi_online	                            "Philips Hue Bridge (U-online) [MAP(unifi.map):%s]"	                                    <switch>			    (g_controller_hue_bridge)                                                                  	                                                { channel="unifi:client:unifi_thuis:unifi_controller_philips_hue_bridge:online" }
String		philips_hue_bridge_unifi_site	                            "Philips Hue Bridge (U-site)"	                                                        <network>			    (g_controller_hue_bridge)                                                                  	                                                { channel="unifi:client:unifi_thuis:unifi_controller_philips_hue_bridge:site" }
String		philips_hue_bridge_unifi_ap	                                "Philips Hue Bridge (U-ap)"                    	                                        <network>			    (g_controller_hue_bridge)                                                                  	                                                { channel="unifi:client:unifi_thuis:unifi_controller_philips_hue_bridge:ap" }
String		philips_hue_bridge_unifi_essid	                            "Philips Hue Bridge (U-essid)"	                                                        <chart>			        (g_controller_hue_bridge)                                                                  	                                                { channel="unifi:client:unifi_thuis:unifi_controller_philips_hue_bridge:essid" }
Number		philips_hue_bridge_unifi_rssi	                            "Philips Hue Bridge (U-RSSI) [%s]"						                                <qualityofservice>	    (g_controller_hue_bridge)	                                                                                                                { channel="unifi:client:unifi_thuis:unifi_controller_philips_hue_bridge:rssi" } 
Number		philips_hue_bridge_unifi_uptime	                            "Philips Hue Bridge (U-Uptime) [%d]"						                            <time>				    (g_controller_hue_bridge)	                                                                                                                { channel="unifi:client:unifi_thuis:unifi_controller_philips_hue_bridge:uptime" }
DateTime	philips_hue_bridge_unifi_lastseen                           "Philips Hue Bridge (U-LastSeen) [%1$tH:%1$tM:%1$tS]"                                 	<time>	                (g_controller_hue_bridge)	                                                                                                                { channel="unifi:client:unifi_thuis:unifi_controller_philips_hue_bridge:lastSeen" }

//Amazon Echo Dot
Switch		amazon_echo_dot_net_online								    "Amazon Echo Dot (net) [%s]"						                                    <network>				(g_controller_echo_dot, gf_living)                                                                                                          { channel="network:pingdevice:192_168_1_82:online" }
Number		amazon_echo_dot_net_time								    "Amazon Echo Dot (ping) [%.0f ms]"					                                    <status>				(g_controller_echo_dot, g_chart)                                                                                                            { channel="network:pingdevice:192_168_1_82:latency" }
DateTime	amazon_echo_dot_net_lastseen							    "Amazon Echo Dot (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"				            <status>				(g_controller_echo_dot, g_restore)                                                                                                          { channel="network:pingdevice:192_168_1_82:lastseen" }

Switch		amazon_echo_dot_unifi_online	                            "Amazon Echo Dot (U-online) [MAP(unifi.map):%s]"	                                    <switch>			    (g_controller_echo_dot)                                                                  	                                                { channel="unifi:client:unifi_thuis:unifi_controller_amazon_echo_dot:online" }
String		amazon_echo_dot_unifi_site	                                "Amazon Echo Dot (U-site)"	                                                            <network>			    (g_controller_echo_dot)                                                                  	                                                { channel="unifi:client:unifi_thuis:unifi_controller_amazon_echo_dot:site" }
String		amazon_echo_dot_unifi_ap	                                "Amazon Echo Dot (U-ap)"                    	                                        <network>			    (g_controller_echo_dot)                                                                  	                                                { channel="unifi:client:unifi_thuis:unifi_controller_amazon_echo_dot:ap" }
String		amazon_echo_dot_unifi_essid	                                "Amazon Echo Dot (U-essid)"	                                                            <chart>			        (g_controller_echo_dot)                                                                  	                                                { channel="unifi:client:unifi_thuis:unifi_controller_amazon_echo_dot:essid" }
Number		amazon_echo_dot_unifi_rssi	                                "Amazon Echo Dot (U-RSSI) [%s]"						                                    <qualityofservice>	    (g_controller_echo_dot)	                                                                                                                    { channel="unifi:client:unifi_thuis:unifi_controller_amazon_echo_dot:rssi" } 
Number		amazon_echo_dot_unifi_uptime	                            "Amazon Echo Dot (U-Uptime) [%d]"						                                <time>				    (g_controller_echo_dot)	                                                                                                                    { channel="unifi:client:unifi_thuis:unifi_controller_amazon_echo_dot:uptime" }
DateTime	amazon_echo_dot_unifi_lastseen                              "Amazon Echo Dot (U-LastSeen) [%1$tH:%1$tM:%1$tS]"                                 	    <time>	                (g_controller_echo_dot)	                                                                                                                    { channel="unifi:client:unifi_thuis:unifi_controller_amazon_echo_dot:lastSeen" }

Player      amazon_echo_dot_player                                      "Player"                                                                                                        (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:player" }
Dimmer      amazon_echo_dot_volume                                      "Volume [%.0f %%]"                                                                      <soundvolume>           (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:volume" }
Switch      amazon_echo_dot_shuffle                                     "Shuffle"                                                                                                       (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:shuffle" }
String      amazon_echo_dot_image_url                                   "Image URL"                                                                                                     (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:imageUrl" }
String      amazon_echo_dot_title                                       "Title"                                                                                                         (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:title" }
String      amazon_echo_dot_subtitle1                                   "Subtitle 1"                                                                                                    (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:subtitle1" }
String      amazon_echo_dot_subtitle2                                   "Subtitle 2"                                                                                                    (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:subtitle2" }
String      amazon_echo_dot_provider_displayname                        "Provider"                                                                                                      (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:providerDisplayName" }
String      amazon_echo_dot_bluetooth_id                                "Bluetooth Mac Address"                                                                 <bluetooth>             (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:bluetoothId" }
String      amazon_echo_dot_bluetooth_id_selection                      "Bluetooth Device"                                                                      <bluetoothIdSelection>  (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:bluetoothId" }
Switch      amazon_echo_dot_bluetooth                                   "Bluetooth"                                                                             <bluetooth>             (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:bluetooth" }
String      amazon_echo_dot_bluetooth_device_name                       "Bluetooth Device"                                                                      <bluetooth>             (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:bluetoothDeviceName" }
String      amazon_echo_dot_radio_station_id                            "TuneIn Radio Station Id"                                                                                       (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:radioStationId" }
Switch      amazon_echo_dot_radio                                       "TuneIn Radio"                                                                                                  (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:radio" }
// String      amazon_echo_dot_amazon_music_track_id                       "Amazon Music Track Id"                                                                                         (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:amazonMusicTrackId" }
// String      amazon_echo_dot_amazon_music_play_list_id                   "Amazon Music Playlist Id (Write Only)"                                                                         (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:amazonMusicPlayListId" }
// String      amazon_echo_dot_amazon_music_play_list_id_last_used         "Amazon Music Playlist Id last used"                                                                            (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:amazonMusicPlayListIdLastUsed" }
// Switch      amazon_echo_dot_amazon_music                                "Amazon Music"                                                                                                  (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:amazonMusic" }
String      amazon_echo_dot_remind                                      "Remind"                                                                                                        (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:remind" }
String      amazon_echo_dot_play_alarm_sound                            "Play Alarm Sound"                                                                                              (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:playAlarmSound" }
Switch      amazon_echo_dot_play_flash_briefing                         "Play Flash Briefing"                                                                                           (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:playFlashBriefing" }
Switch      amazon_echo_dot_play_weather_report                         "Play Weather Report"                                                                                           (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:playWeatherReport" }
Switch      amazon_echo_dot_play_traffic_news                           "Play Traffic News"                                                                                             (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:playTrafficNews" }
String      amazon_echo_dot_start_routine                               "Start Routine"                                                                                                 (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:echo:account1:echodot1:startRoutine" }

Switch      amazon_echo_dot_flash_briefing_technical_save               "Flasbriefing Save (Write only)"                                                                                (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:flashbriefingprofile:account1:flashbriefing1:save" } 
Switch      amazon_echo_dot_flash_briefing_technical_active             "Flasbriefing Active"                                                                                           (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:flashbriefingprofile:account1:flashbriefing1:active" }
String      amazon_echo_dot_flash_briefing_technical_play               "Flasbriefing Play (Write only)"                                                                                (g_controller_echo_dot)                                                                                                                     { channel="amazonechocontrol:flashbriefingprofile:account1:flashbriefing1:playOnDevice" }


// onkyo versterker						
Switch		onkyo_receiver_net_online								    "Versterker (net) [%s]"								                                    <network>				(g_receiver_onkyo, gf_living)                                                                                                               { channel="network:pingdevice:192_168_1_100:online" }
Number		onkyo_receiver_net_time									    "Versterker (ping) [%.0f ms]"						                                    <status>				(g_receiver_onkyo, g_chart)                                                                                                                 { channel="network:pingdevice:192_168_1_100:latency" }	
DateTime	onkyo_receiver_net_lastseen								    "Versterker (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"						            <status>				(g_receiver_onkyo,g_restore)                                                                                                                { channel="network:pingdevice:192_168_1_100:lastseen" }	

Switch		onkyo_receiver_harmony_hub								    "Versterker (hub) [%s]"								                                    <switch>				(g_receiver_onkyo, gf_living)
String      onkyo_receiver_harmony_hub_button_press                     "Versterker (hub) button press"                                                                                                                                                                                                                             { channel="harmonyhub:device:Woonkamer:versterker:buttonPress" }

Switch		onkyo_receiver_unifi_online	                                "Versterker (U-online) [MAP(unifi.map):%s]"	                                            <switch>			    (g_receiver_onkyo)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_device_onkyo_receiver:online" }
String		onkyo_receiver_unifi_site	                                "Versterker (U-site)"	                                                                <network>			    (g_receiver_onkyo)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_device_onkyo_receiver:site" }
String		onkyo_receiver_unifi_ap	                                    "Versterker (U-ap)"                    	                                                <network>			    (g_receiver_onkyo)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_device_onkyo_receiver:ap" }
String		onkyo_receiver_unifi_essid	                                "Versterker (U-essid)"	                                                                <chart>			        (g_receiver_onkyo)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_device_onkyo_receiver:essid" }
Number		onkyo_receiver_unifi_rssi	                                "Versterker (U-RSSI) [%s]"						                                        <qualityofservice>	    (g_receiver_onkyo)	                                                                                                                        { channel="unifi:client:unifi_thuis:unifi_device_onkyo_receiver:rssi" } 
Number		onkyo_receiver_unifi_uptime	                                "Versterker (U-Uptime) [%d]"						                                    <time>				    (g_receiver_onkyo)	                                                                                                                        { channel="unifi:client:unifi_thuis:unifi_device_onkyo_receiver:uptime" }
DateTime	onkyo_receiver_unifi_lastseen                               "Versterker (U-LastSeen) [%1$tH:%1$tM:%1$tS]"                                 	        <time>	                (g_receiver_onkyo)	                                                                                                                        { channel="unifi:client:unifi_thuis:unifi_device_onkyo_receiver:lastSeen" }


// groene tl
Switch		switch_groene_tl_net_online								    "Groene TL (net) [%s]"								                                    <network>				(g_sonoff_green_tl)                                                                                                                         { channel="network:pingdevice:192_168_1_152:online" }
Number		switch_groene_tl_net_time								    "Groene TL (ping) [%.0f ms]"						                                    <status>				(g_sonoff_green_tl,g_chart)                                                                                                                 { channel="network:pingdevice:192_168_1_152:latency" }
DateTime	switch_groene_tl_net_lastseen							    "Groene TL (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"						            <status>				(g_sonoff_green_tl)                                                                                                                         { channel="network:pingdevice:192_168_1_152:lastseen" }

Switch		switch_groene_tl_toggle									    "Groene TL (switch) [%s]"							        	                        <light> 				(g_sonoff_green_tl, gf_living, lights, scene_all_off)					                                                                    { mqtt=">[mosquitto:cmnd/sonoff_green_tl/power:command:*:default], <[mosquitto:stat/sonoff_green_tl/POWER:state:default]" }
Switch		switch_groene_tl_setting_all_off						    "Groene TL (all off)"   							                                    <switch> 				(g_sonoff_green_tl, settings_all_off_selection, g_restore)					                           
String		switch_groene_tl_toggle_startup_state					    "Groene TL (startup state) [%s]"					                                    <light> 				(g_sonoff_green_tl, gf_living,g_maintenance_sonoff_status, g_sonoff_startup_states)		                                                    { mqtt="<[mosquitto:stat/sonoff_green_tl/STATUS11:state:JSONPATH($.StatusSTS.POWER)]" }
String 		switch_groene_tl_reachable								    "Groene TL (reachable) [%s]"						                                    <switch>				(g_sonoff_green_tl)								                                                                                            { mqtt="<[mosquitto:tele/sonoff_green_tl/LWT:state:MAP(reachable.map)]" }
String		switch_groene_tl_rssi									    "Groene TL (RSSI) [%d %%]"							                                    <status>				(g_sonoff_green_tl, g_chart)								                                                                                { mqtt="<[mosquitto:tele/sonoff_green_tl/STATE:state:JSONPATH($.Wifi.RSSI)]" }
String		switch_groene_tl_action__sonoff_green_tl				    "Groene TL (action)"								                                    <network>				(g_maintenance_sonoff_action) 					                                                                                            { autoupdate="false" }
String		switch_groene_tl_local_fw_version 						    "Groene TL (running fw version) [%s]"										                                    (g_sonoff_green_tl, g_maintenance_sonoff_status, g_sonoff_firmware)			                                                                { mqtt="<[mosquitto:tele/sonoff_green_tl/INFO1:state:JSONPATH($.Version)],<[mosquitto:stat/sonoff_green_tl/STATUS2:state:JSONPATH($.StatusFWR.Version)]" }
String		switch_groene_tl_fw_version 							    "Groene TL (fw version) [%s]"												                                    (g_sonoff_green_tl, g_maintenance_sonoff_status)

Switch		switch_groene_tl_unifi_online	                            "Groene TL (U-online) [MAP(unifi.map):%s]"	                                            <switch>			    (g_sonoff_green_tl)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_switch_groene_tl:online" }
String		switch_groene_tl_unifi_site	                                "Groene TL (U-site)"	                                                                <network>			    (g_sonoff_green_tl)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_switch_groene_tl:site" }
String		switch_groene_tl_unifi_ap	                                "Groene TL (U-ap)"                    	                                                <network>			    (g_sonoff_green_tl)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_switch_groene_tl:ap" }
String		switch_groene_tl_unifi_essid	                            "Groene TL (U-essid)"	                                                                <chart>			        (g_sonoff_green_tl)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_switch_groene_tl:essid" }
Number		switch_groene_tl_unifi_rssi	                                "Groene TL (U-RSSI) [%s]"						                                        <qualityofservice>	    (g_sonoff_green_tl)	                                                                                                                        { channel="unifi:client:unifi_thuis:unifi_sonoff_switch_groene_tl:rssi" } 
Number		switch_groene_tl_unifi_uptime	                            "Groene TL (U-Uptime) [%d]"						                                        <time>				    (g_sonoff_green_tl)	                                                                                                                        { channel="unifi:client:unifi_thuis:unifi_sonoff_switch_groene_tl:uptime" }
DateTime	switch_groene_tl_unifi_lastseen                             "Groene TL (U-LastSeen) [%1$tH:%1$tM:%1$tS]"                                 	        <time>	                (g_sonoff_green_tl)	                                                                                                                        { channel="unifi:client:unifi_thuis:unifi_sonoff_switch_groene_tl:lastSeen" }


// led strip tv
Switch		switch_led_strip_tv_net_online							    "Led strip TV (net) [%s]"							                                    <network>				(g_sonoff_led_strip_tv)                                                                                                                     { channel="network:pingdevice:192_168_1_161:online" }
Number		switch_led_strip_tv_net_time							    "Led strip TV (ping) [%.0f ms]"						                                    <status>				(g_sonoff_led_strip_tv,g_chart)                                                                                                             { channel="network:pingdevice:192_168_1_161:latency" }
Number		switch_led_strip_tv_net_lastseen						    "Led strip TV (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"					        	<status>				(g_sonoff_led_strip_tv, g_restore)                                                                                                          { channel="network:pingdevice:192_168_1_161:lastseen" }
Switch		switch_led_strip_tv_toggle								    "Led strip TV (switch) [%s]"						                                    <light> 				(g_sonoff_led_strip_tv, gf_living, lights, scene_all_off)								                                                    { mqtt=">[mosquitto:cmnd/sonoff_switch_ledstrip_tv/power:command:*:default], <[mosquitto:stat/sonoff_switch_ledstrip_tv/POWER:state:default]" }
Switch		switch_led_strip_tv_setting_all_off						    "Led strip TV (all off)"    						                                    <switch> 				(g_sonoff_led_strip_tv, settings_all_off_selection, g_restore)
String		switch_led_strip_tv_toggle_startup_state				    "Led strip TV (startup state) [%s]"					                                    <light> 				(g_sonoff_led_strip_tv, g_maintenance_sonoff_status, g_sonoff_startup_states)			                                                    { mqtt="<[mosquitto:stat/sonoff_switch_ledstrip_tv/STATUS11:state:JSONPATH($.StatusSTS.POWER)]" }
String 		switch_led_strip_tv_reachable							    "Led strip TV (reachable) [%s]"					                                    	<switch>				(g_sonoff_led_strip_tv)												                                                                        { mqtt="<[mosquitto:tele/sonoff_switch_ledstrip_tv/LWT:state:MAP(reachable.map)]" }
Number		switch_led_strip_tv_rssi								    "Led strip TV (RSSI) [%d %%]"						                                    <status>				(g_sonoff_led_strip_tv, g_chart)											                                                                { mqtt="<[mosquitto:tele/sonoff_switch_ledstrip_tv/STATE:state:JSONPATH($.Wifi.RSSI)]" }
String		switch_led_strip_tv_action__sonoff_switch_ledstrip_tv	    "Led strip TV (action)"								                                    <network>				(g_maintenance_sonoff_action)			                                                                                                    { autoupdate="false" }
String		switch_led_strip_tv_local_fw_version 					    "Led strip TV (running fw version) [%s]"									                                    (g_sonoff_led_strip_tv, g_maintenance_sonoff_status, g_sonoff_firmware)		                                                                { mqtt="<[mosquitto:tele/sonoff_switch_ledstrip_tv/INFO1:state:JSONPATH($.Version)], <[mosquitto:stat/sonoff_switch_ledstrip_tv/STATUS2:state:JSONPATH($.StatusFWR.Version)]" }
String		switch_led_strip_tv_fw_version 							    "Led strip TV (fw version) [%s]"											                                    (g_sonoff_led_strip_tv, g_maintenance_sonoff_status)

Switch		switch_led_strip_tv_unifi_online	                        "Led strip TV (U-online) [MAP(unifi.map):%s]"	                                        <switch>			    (g_sonoff_led_strip_tv)                                                                  	                                                { channel="unifi:client:unifi_thuis:unifi_sonoff_switch_led_strip_tv:online" }
String		switch_led_strip_tv_unifi_site	                            "Led strip TV (U-site)"	                                                                <network>			    (g_sonoff_led_strip_tv)                                                                  	                                                { channel="unifi:client:unifi_thuis:unifi_sonoff_switch_led_strip_tv:site" }
String		switch_led_strip_tv_unifi_ap	                            "Led strip TV (U-ap)"                    	                                            <network>			    (g_sonoff_led_strip_tv)                                                                  	                                                { channel="unifi:client:unifi_thuis:unifi_sonoff_switch_led_strip_tv:ap" }
String		switch_led_strip_tv_unifi_essid	                            "Led strip TV (U-essid)"	                                                            <chart>			        (g_sonoff_led_strip_tv)                                                                  	                                                { channel="unifi:client:unifi_thuis:unifi_sonoff_switch_led_strip_tv:essid" }
Number		switch_led_strip_tv_unifi_rssi	                            "Led strip TV (U-RSSI) [%s]"						                                    <qualityofservice>	    (g_sonoff_led_strip_tv)	                                                                                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_switch_led_strip_tv:rssi" } 
Number		switch_led_strip_tv_unifi_uptime	                        "Led strip TV (U-Uptime) [%d]"						                                    <time>				    (g_sonoff_led_strip_tv)	                                                                                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_switch_led_strip_tv:uptime" }
DateTime	switch_led_strip_tv_unifi_lastseen                          "Led strip TV (U-LastSeen) [%1$tH:%1$tM:%1$tS]"                                 	    <time>	                (g_sonoff_led_strip_tv)	                                                                                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_switch_led_strip_tv:lastSeen" }


// panasonic tv
Switch		panasonic_tv_harmony_hub								    "TV (hub) [%s]"										                                    <switch>				(g_tv_panasonic, gf_living)
String      panasonic_tv_harmony_hub_button_press                       "TV (hub) button press"                                                                                                                                                                                                                                     { channel="harmonyhub:device:Woonkamer:tv:buttonPress" }

// htpc
// Switch		mediacenter_pc_turn_off									    "Mediacenter PC"															                                (g_desktop_mediacenter, gf_living, scene_all_off)			                                                                                { exec="OFF:/bin/sh@@-c@@/opt/openhab1/configurations/scripts/windows_shutdown.sh 192.168.1.4 mediacenter HTPC"} // have to change to the linux version
// Switch		mediacenter_pc_net_online								    "Mediacenter PC (net) [%s]"							                                <network>               (g_desktop_mediacenter, gf_living)
// Number		mediacenter_pc_net_time									    "Mediacenter PC (ping) [%.0f ms]"					                                <status>				(g_desktop_mediacenter,g_chart)
// Number		mediacenter_pc_net_lastseen								    "Mediacenter PC (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"					        <status>				(g_desktop_mediacenter,g_chart)
// Switch		mediacenter_pc_turn_on									    "Mediacenter PC"															                                (g_desktop_mediacenter, gf_living)					                                                                                        { wol="192.168.1.255#00:1F:D0:DB:46:A2", autoupdate="false" }

// livolo switch 
Switch		switch_livolo_button_1									    "Livolo knop 1 [%s]"														            <fan>                   (g_livolo_kitchen, gf_living)		                 
Switch		switch_livolo_button_2									    "Livolo knop 2 [%s]"														            <light>                 (g_livolo_kitchen, gf_living)                        

Switch		switch_livolo_button_command								"Livolo knop command [%s]"														        <light>                 (g_livolo_kitchen, gf_living)                                                                                                               { channel="rfxcom:lighting5:9bcd2975:command"}                                   
Contact		switch_livolo_button_contact								"Livolo knop contact [%s]"														        <light>                 (g_livolo_kitchen, gf_living)                                                                                                               { channel="rfxcom:lighting5:9bcd2975:contact"}                                   
Dimmer		switch_livolo_button_dimming_level							"Livolo knop dimmingLevel [%s]"														    <light>                 (g_livolo_kitchen, gf_living)                                                                                                               { channel="rfxcom:lighting5:9bcd2975:dimmingLevel"}                                   
Number		switch_livolo_button_mood								    "Livolo knop mood [%s]"														            <light>                 (g_livolo_kitchen, gf_living)                                                                                                               { channel="rfxcom:lighting5:9bcd2975:mood"}                                   
Number		switch_livolo_button_signal_level						    "Livolo knop signalLevel [%s]"														    <light>                 (g_livolo_kitchen, gf_living)                                                                                                               { channel="rfxcom:lighting5:9bcd2975:signalLevel"}                                   

// thermostaat (woonkamer)
Switch		evohome_woonkamer_thermostaat_net_online				    "Woonkamer thermostaat (net) [%s]"					                                    <network>				(g_evohome)							                                                                                                        { channel="network:pingdevice:192_168_1_83:online" }
Number		evohome_woonkamer_thermostaat_net_time					    "Woonkamer thermostaat (ping) [%.0f ms]"			                                    <status>			    (g_evohome,g_chart)							                                                                                                { channel="network:pingdevice:192_168_1_83:latency" }
DateTime	evohome_woonkamer_thermostaat_net_lastseen				    "Woonkamer thermostaat (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"			            <status>			    (g_evohome, g_restore)							                                                                                            { channel="network:pingdevice:192_168_1_83:lastseen" }

Number      evohome_woonkamer_temperature                               "Woonkamer Reported Temp [%.1f Â°C]"                                                     <temperature>	        (g_evohome, g_emoncms_mqtt)	                                                                                                                { channel="evohome:heatingzone:evohome_account:Woonkamer:Temperature" }
Number      evohome_woonkamer_setpoint_current                          "Woonkamer Setpoint current [%.1f Â°C]"                                                  <heating>               (g_evohome)                                                                                                                                 { channel="evohome:heatingzone:evohome_account:Woonkamer:CurrentSetPoint" }
String      evohome_woonkamer_setpoint_status                           "Woonkamer Setpoint Status [%s]"                                                        <heating>               (g_evohome)                                                                                                                                 { channel="evohome:heatingzone:evohome_account:Woonkamer:SetPointStatus" }
Number      evohome_woonkamer_setpoint_permanent                        "Woonkamer Setpoint permanent override [%.1f Â°C]"                                       <heating>               (g_evohome)                                                                                                                                 { channel="evohome:heatingzone:evohome_account:Woonkamer:PermanentSetPoint" }
Switch      evohome_woonkamer_setpoint_override_cancel                  "Woonkamer Setpoint override cancel [%.1f Â°C]"                                          <heating>               (g_evohome)                                                                                                                                 { channel="evohome:heatingzone:evohome_account:Woonkamer:CancelSetPoint" }
String      evohome_evotouch_systemmode                                 "Evotouch systemmode [%s]"                                                                                      (g_evohome)                                                                                                                                 { channel="evohome:display:evohome_account:Evotouch:SystemMode" }

Switch		evohome_woonkamer_thermostaat_unifi_online	                "Woonkamer thermostaat (U-online) [MAP(unifi.map):%s]"	                                <switch>			    (g_evohome)                                                                  	                                                            { channel="unifi:client:unifi_thuis:unifi_controller_honeywell_evohome:online" }
String		evohome_woonkamer_thermostaat_unifi_site	                "Woonkamer thermostaat (U-site)"	                                                    <network>			    (g_evohome)                                                                  	                                                            { channel="unifi:client:unifi_thuis:unifi_controller_honeywell_evohome:site" }
String		evohome_woonkamer_thermostaat_unifi_ap	                    "Woonkamer thermostaat (U-ap)"                    	                                    <network>			    (g_evohome)                                                                  	                                                            { channel="unifi:client:unifi_thuis:unifi_controller_honeywell_evohome:ap" }
String		evohome_woonkamer_thermostaat_unifi_essid	                "Woonkamer thermostaat (U-essid)"	                                                    <chart>			        (g_evohome)                                                                  	                                                            { channel="unifi:client:unifi_thuis:unifi_controller_honeywell_evohome:essid" }
Number		evohome_woonkamer_thermostaat_unifi_rssi	                "Woonkamer thermostaat (U-RSSI) [%s]"						                            <qualityofservice>	    (g_evohome)	                                                                                                                                { channel="unifi:client:unifi_thuis:unifi_controller_honeywell_evohome:rssi" } 
Number		evohome_woonkamer_thermostaat_unifi_uptime	                "Woonkamer thermostaat (U-Uptime) [%d]"						                            <time>				    (g_evohome)	                                                                                                                                { channel="unifi:client:unifi_thuis:unifi_controller_honeywell_evohome:uptime" }
DateTime	evohome_woonkamer_thermostaat_unifi_lastseen                "Woonkamer thermostaat (U-LastSeen) [%1$tH:%1$tM:%1$tS]"                                <time>	                (g_evohome)	                                                                                                                                { channel="unifi:client:unifi_thuis:unifi_controller_honeywell_evohome:lastSeen" }


// Chromecast
Switch		chromecast_woonkamer_net_online				                "Chromecast (net) [%s]"					                                                <network>				(g_chromecast)							                                                                                                    { channel="network:pingdevice:192_168_1_84:online" }	
Number		chromecast_woonkamer_net_time					            "Chromecast (ping) [%.0f ms]"				                                            <status>			    (g_chromecast,g_chart)							                                                                                            { channel="network:pingdevice:192_168_1_84:latency" }
DateTime	chromecast_woonkamer_net_lastseen				            "Chromecast (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"				                    <status>			    (g_chromecast,g_restore)					                                                                                                { channel="network:pingdevice:192_168_1_84:lastseen" }

String      chromecast_woonkamer_harmony_hub_button_press               "Chromecast button press"                                                                                                                                                                                                                                   { channel="harmonyhub:device:Woonkamer:chromecast:buttonPress" }    

String      chromecast_woonkamer_py_app                                 "App [%s]"                                                                              <player>                 (g_chromecast)                                                                                                                              { mqtt="<[mosquitto:chromecast/Woonkamer/app:state:default]" }
String      chromecast_woonkamer_py_status                              "Status [MAP(chromecast_status.map):%s]"                                                <status>                 (g_chromecast, g_lastupdate_rule)                                                                                                           { mqtt="<[mosquitto:chromecast/Woonkamer/state:state:default]" } 
String      chromecast_woonkamer_py_title                               "Title [%s]"                                                                            <radio>                 (g_chromecast)                                                                                                                              { mqtt="<[mosquitto:chromecast/Woonkamer/title:state:default]" }
String      chromecast_woonkamer_py_thumbnail                           "Thumbnail [%s]"                                                                        <radio>                 (g_chromecast)                                                                                                                              { mqtt="<[mosquitto:chromecast/Woonkamer/thumbnail:state:default]" }
String      chromecast_woonkamer_py_artist                              "Artist [%s]"                                                                           <radio>                 (g_chromecast)                                                                                                                              { mqtt="<[mosquitto:chromecast/Woonkamer/artist:state:default]" }
String      chromecast_woonkamer_py_album                               "Album [%s]"                                                                            <radio>                 (g_chromecast)                                                                                                                              { mqtt="<[mosquitto:chromecast/Woonkamer/album:state:default]" }
String      chromecast_woonkamer_py_type                                "Media Type [MAP(chromecast_media_types.map):%s]"                                       <video>                 (g_chromecast)                                                                                                                              { mqtt="<[mosquitto:chromecast/Woonkamer/mediatype:state:default]" }
Number      chromecast_woonkamer_py_volume                              "Volume [%.1f %%]"                                                                      <volume>                (g_chromecast)                                                                                                                              { mqtt="<[mosquitto:chromecast/Woonkamer/volume:state:default]" }
Number      chromecast_woonkamer_py_current                             "Current [%.1f]"                                                                        <play>                  (g_chromecast)                                                                                                                              { mqtt="<[mosquitto:chromecast/Woonkamer/current:state:default]" }
Number      chromecast_woonkamer_py_duration                            "Duration [%.1f]"                                                                       <play>                  (g_chromecast)                                                                                                                              { mqtt="<[mosquitto:chromecast/Woonkamer/duration:state:default]" }
//Switch      chromecast_woonkamer_py_play                                "Play/Pause"                                                                          <play>                  (g_chromecast)                                                                                                                              { mqtt="<[mosquitto:chromecast/Woonkamer/is_playing:state:default]", mqtt=">[mosquitto:chromecast/Woonkamer/command:command:ON:play], >[mosquitto:chromecast/Woonkamer/command:command:OFF:pause]" }
Switch      chromecast_woonkamer_py_stop                                "Stop"                                                                                  <switch-off>            (g_chromecast)                                                                                                                              { mqtt=">[mosquitto:chromecast/Woonkamer/command:command:ON:stop]" }
Switch      chromecast_woonkamer_py_reboot                              "Reboot"                                                                                <alarm>                 (g_chromecast)                                                                                                                              { mqtt=">[mosquitto:chromecast/Woonkamer/command:command:ON:reboot]" }
Dimmer      chromecast_woonkamer_py_volume_control                      "Volume"                                                                                <volume>                (g_chromecast)                                                                                                                              { mqtt=">[mosquitto:chromecast/Woonkamer/command:command:*:set_volume|${command}]" } 
Dimmer      chromecast_woonkamer_py_play_control                        "Replay/Skip"                                                                           <replay>                (g_chromecast)                                                                                                                              { mqtt=">[mosquitto:chromecast/Woonkamer/command:command:ON:replay|10], >[mosquitto:chromecast/Woonkamer/command:command:OFF:skip|10]" }  
Switch      chromecast_woonkamer_py_update                              "Update"                                                                                <returnpipe>            (g_chromecast)                                                                                                                              { mqtt=">[mosquitto:chromecast/Woonkamer/command:command:ON:update]", expire="1s, state=OFF"} // expires in 1 second}  
DateTime	chromecast_woonkamer_py_status_lastupdate				    "Chromecast Status (Lastupdate) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"		                <door>                  (g_chromecast, g_restore, g_lastupdate)                          				                        
//Switch      chromecast_woonkamer_py_was_playing                       "Was playing [%s] (Not used yet)"                                                                               (g_chromecast)
//String      chromecast_woonkamer_py_media_owner                       "Controller [%s] (Not used yet)"                                                        <chromecast>            (g_chromecast)

Switch		chromecast_woonkamer_unifi_online	                        "Chromecast (U-online) [MAP(unifi.map):%s]"	                                            <switch>			    (g_chromecast)                                                                  	                                                        { channel="unifi:client:unifi_thuis:unifi_controller_google_chromecast:online" }
String		chromecast_woonkamer_unifi_site	                            "Chromecast (U-site)"	                                                                <network>			    (g_chromecast)                                                                  	                                                        { channel="unifi:client:unifi_thuis:unifi_controller_google_chromecast:site" }
String		chromecast_woonkamer_unifi_ap	                            "Chromecast (U-ap)"                    	                                                <network>			    (g_chromecast)                                                                  	                                                        { channel="unifi:client:unifi_thuis:unifi_controller_google_chromecast:ap" }
String		chromecast_woonkamer_unifi_essid	                        "Chromecast (U-essid)"	                                                                <chart>			        (g_chromecast)                                                                  	                                                        { channel="unifi:client:unifi_thuis:unifi_controller_google_chromecast:essid" }
Number		chromecast_woonkamer_unifi_rssi	                            "Chromecast (U-RSSI) [%s]"						                                        <qualityofservice>	    (g_chromecast)	                                                                                                                            { channel="unifi:client:unifi_thuis:unifi_controller_google_chromecast:rssi" } 
Number		chromecast_woonkamer_unifi_uptime	                        "Chromecast (U-Uptime) [%d]"						                                    <time>				    (g_chromecast)	                                                                                                                            { channel="unifi:client:unifi_thuis:unifi_controller_google_chromecast:uptime" }
DateTime	chromecast_woonkamer_unifi_lastseen                         "Chromecast (U-LastSeen) [%1$tH:%1$tM:%1$tS]"                                 	        <time>	                (g_chromecast)	                                                                                                                            { channel="unifi:client:unifi_thuis:unifi_controller_google_chromecast:lastSeen" }



// meter voor tvmeubel - geen toggle!
Switch	 	meter_audiovideo_net_online								    "Meter audiovideo (net) [%s]"								                            <network>		        (g_sonoff_meter_audiovideo)                                                                                                                 { channel="network:pingdevice:192_168_1_160:online" }
Number 		meter_audiovideo_net_time								    "Meter audiovideo (ping) [%.0f ms]"						                                <status>			    (g_sonoff_meter_audiovideo, g_chart)                                                                                                        { channel="network:pingdevice:192_168_1_160:latency" }
DateTime	meter_audiovideo_net_lastseen							    "Meter audiovideo (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"						    <status>		        (g_sonoff_meter_audiovideo, g_restore)                                                                                                      { channel="network:pingdevice:192_168_1_160:lastseen" }
Number 		meter_audiovideo_power             		 		            "Meter audiovideo (power) [%.1f W]"						                                <energy>			    (g_sonoff_meter_audiovideo, g_chart, g_emoncms_mqtt)				                                                                        { mqtt="<[mosquitto:tele/sonoff_meter_audiovideo/ENERGY:state:JSONPATH($.Power)]" }
Number 		meter_audiovideo_voltage            				        "Meter audiovideo (line voltage) [%.1f V]"				                                <energy>			    (g_sonoff_meter_audiovideo, g_emoncms_mqtt)						                                                                            { mqtt="<[mosquitto:tele/sonoff_meter_audiovideo/ENERGY:state:JSONPATH($.Voltage)]" }
Number 		meter_audiovideo_current            				        "Meter audiovideo (line current) [%.1f A]"				                                <energy>			    (g_sonoff_meter_audiovideo, g_emoncms_mqtt)						                                                                            { mqtt="<[mosquitto:tele/sonoff_meter_audiovideo/ENERGY:state:JSONPATH($.Current)]" }
Number 		meter_audiovideo_real_power_factor					        "Meter audiovideo (real power ratio) [%s]"				                                <energy>			    (g_sonoff_meter_audiovideo, g_emoncms_mqtt)						                                                                            { mqtt="<[mosquitto:tele/sonoff_meter_audiovideo/ENERGY:state:JSONPATH($.Factor)]" }
Number 		meter_audiovideo_energy_usage_since_last_update	            "Meter audiovideo (usage since last update) [%.1f kWh]"	                                <energy>			    (g_sonoff_meter_audiovideo, g_emoncms_mqtt)						                                                                            { mqtt="<[mosquitto:tele/sonoff_meter_audiovideo/ENERGY:state:JSONPATH($.Period)]" }
Number 		meter_audiovideo_energy_usage_today				            "Meter audiovideo (today's usage) [%.1f kWh]"				                            <energy>		        (g_sonoff_meter_audiovideo, g_emoncms_mqtt)						                                                                            { mqtt="<[mosquitto:tele/sonoff_meter_audiovideo/ENERGY:state:JSONPATH($.Yesterday)]" }
Number 		meter_audiovideo_energy_usage_yesterday 			        "Meter audiovideo (yesterday's usage) [%.1f kWh]"			                            <energy>		        (g_sonoff_meter_audiovideo, g_emoncms_mqtt)						                                                                            { mqtt="<[mosquitto:tele/sonoff_meter_audiovideo/ENERGY:state:JSONPATH($.Today)]" }
String	 	meter_audiovideo_action__sonoff_meter_audiovideo            "Meter audiovideo (action)"								                                <network>			    (g_maintenance_sonoff_action)					                                                                                            { autoupdate="false" }
String		meter_audiovideo_local_fw_version 					        "Meter audiovideo (running fw version) [%s]"								                                    (g_sonoff_meter_audiovideo, g_maintenance_sonoff_status, g_sonoff_firmware) 		                                                        { mqtt="<[mosquitto:tele/sonoff_meter_audiovideo/INFO1:state:JSONPATH($.Version)], <[mosquitto:stat/sonoff_meter_audiovideo/STATUS2:state:JSONPATH($.StatusFWR.Version)]" }
String		meter_audiovideo_fw_version 						        "Meter audiovideo (fw version) [%s]"										                                    (g_sonoff_meter_audiovideo, g_maintenance_sonoff_status)
Switch		meter_audiovideo_reachable								    "Meter audiovideo (reachable) [%s]"				                                        <switch>				(g_sonoff_meter_audiovideo)										                                                                            { mqtt="<[mosquitto:tele/sonoff_meter_audiovideo/LWT:state:MAP(reachable.map)]" }
Number		meter_audiovideo_rssi									    "Meter audiovideo (RSSI) [%d %%]"					                                    <status>				(g_sonoff_meter_audiovideo, g_chart)							                                                                            { mqtt="<[mosquitto:tele/sonoff_meter_audiovideo/STATE:state:JSONPATH($.Wifi.RSSI)]" }	

Switch		meter_audiovideo_unifi_online	                            "Meter audiovideo (U-online) [MAP(unifi.map):%s]"	                                    <switch>			    (g_sonoff_meter_audiovideo)                                                                  	                                            { channel="unifi:client:unifi_thuis:unifi_sonoff_meter_audiovideo:online" }
String		meter_audiovideo_unifi_site	                                "Meter audiovideo (U-site)"	                                                            <network>			    (g_sonoff_meter_audiovideo)                                                                  	                                            { channel="unifi:client:unifi_thuis:unifi_sonoff_meter_audiovideo:site" }
String		meter_audiovideo_unifi_ap	                                "Meter audiovideo (U-ap)"                    	                                        <network>			    (g_sonoff_meter_audiovideo)                                                                  	                                            { channel="unifi:client:unifi_thuis:unifi_sonoff_meter_audiovideo:ap" }
String		meter_audiovideo_unifi_essid	                            "Meter audiovideo (U-essid)"	                                                        <chart>			        (g_sonoff_meter_audiovideo)                                                                  	                                            { channel="unifi:client:unifi_thuis:unifi_sonoff_meter_audiovideo:essid" }
Number		meter_audiovideo_unifi_rssi	                                "Meter audiovideo (U-RSSI) [%s]"						                                <qualityofservice>	    (g_sonoff_meter_audiovideo)	                                                                                                                { channel="unifi:client:unifi_thuis:unifi_sonoff_meter_audiovideo:rssi" } 
Number		meter_audiovideo_unifi_uptime	                            "Meter audiovideo (U-Uptime) [%d]"						                                <time>				    (g_sonoff_meter_audiovideo)	                                                                                                                { channel="unifi:client:unifi_thuis:unifi_sonoff_meter_audiovideo:uptime" }
DateTime	meter_audiovideo_unifi_lastseen                             "Meter audiovideo (U-LastSeen) [%1$tH:%1$tM:%1$tS]"                                 	<time>	                (g_sonoff_meter_audiovideo)	                                                                                                                { channel="unifi:client:unifi_thuis:unifi_sonoff_meter_audiovideo:lastSeen" }

// meter voor koelkast - geen toggle!
Switch	 	meter_koelkast_net_online								    "Meter koelkast (net) [%s]"								                                <network>		        (g_sonoff_meter_koelkast)                                                                                                                   { channel="network:pingdevice:192_168_1_159:online" }
Number 		meter_koelkast_net_time								        "Meter koelkast (ping) [%.0f ms]"						                                <status>			    (g_sonoff_meter_koelkast,g_chart)                                                                                                           { channel="network:pingdevice:192_168_1_159:latency" }
DateTime	meter_koelkast_net_lastseen							        "Meter koelkast (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"						        <status>			    (g_sonoff_meter_koelkast, g_restore)                                                                                                        { channel="network:pingdevice:192_168_1_159:lastseen" }
Number 		meter_koelkast_power             		 		            "Meter koelkast (power) [%.1f W]"						                                <energy>			    (g_sonoff_meter_koelkast,g_chart, g_emoncms_mqtt)				                                                                            { mqtt="<[mosquitto:tele/sonoff_meter_koelkast/ENERGY:state:JSONPATH($.Power)]" }
Number 		meter_koelkast_voltage            				            "Meter koelkast (line voltage) [%.1f V]"				                                <energy>			    (g_sonoff_meter_koelkast, g_emoncms_mqtt)						                                                                            { mqtt="<[mosquitto:tele/sonoff_meter_koelkast/ENERGY:state:JSONPATH($.Voltage)]" }
Number 		meter_koelkast_current            				            "Meter koelkast (line current) [%.1f A]"				                                <energy>			    (g_sonoff_meter_koelkast, g_emoncms_mqtt)						                                                                            { mqtt="<[mosquitto:tele/sonoff_meter_koelkast/ENERGY:state:JSONPATH($.Current)]" }
Number 		meter_koelkast_real_power_factor					        "Meter koelkast (real power ratio) [%s]"				                                <energy>			    (g_sonoff_meter_koelkast, g_emoncms_mqtt)						                                                                            { mqtt="<[mosquitto:tele/sonoff_meter_koelkast/ENERGY:state:JSONPATH($.Factor)]" }
Number 		meter_koelkast_energy_usage_since_last_update	            "Meter koelkast (usage since last update) [%.1f kWh]"	                                <energy>			    (g_sonoff_meter_koelkast, g_emoncms_mqtt)						                                                                            { mqtt="<[mosquitto:tele/sonoff_meter_koelkast/ENERGY:state:JSONPATH($.Period)]" }
Number 		meter_koelkast_energy_usage_today				            "Meter koelkast (today's usage) [%.1f kWh]"				                                <energy>		        (g_sonoff_meter_koelkast, g_emoncms_mqtt)						                                                                            { mqtt="<[mosquitto:tele/sonoff_meter_koelkast/ENERGY:state:JSONPATH($.Yesterday)]" }
Number 		meter_koelkast_energy_usage_yesterday 			            "Meter koelkast (yesterday's usage) [%.1f kWh]"			                                <energy>		        (g_sonoff_meter_koelkast, g_emoncms_mqtt)						                                                                            { mqtt="<[mosquitto:tele/sonoff_meter_koelkast/ENERGY:state:JSONPATH($.Today)]" }
String	 	meter_koelkast_action__sonoff_meter_koelkast	            "Meter koelkast (action)"								                                <network>			    (g_maintenance_sonoff_action)					                                                                                            { autoupdate="false" }
String		meter_koelkast_local_fw_version 					        "Meter koelkast (running fw version) [%s]"								                                        (g_sonoff_meter_koelkast, g_maintenance_sonoff_status, g_sonoff_firmware) 		                                                            { mqtt="<[mosquitto:tele/sonoff_meter_koelkast/INFO1:state:JSONPATH($.Version)], <[mosquitto:stat/sonoff_meter_koelkast/STATUS2:state:JSONPATH($.StatusFWR.Version)]" }
String		meter_koelkast_fw_version 						            "Meter koelkast (fw version) [%s]"										                                        (g_sonoff_meter_koelkast, g_maintenance_sonoff_status)
Switch		meter_koelkast_reachable								    "Meter koelkast (reachable) [%s]"				                                        <switch>				(g_sonoff_meter_koelkast)										                                                                            { mqtt="<[mosquitto:tele/sonoff_meter_koelkast/LWT:state:MAP(reachable.map)]" }
Number		meter_koelkast_rssi									        "Meter koelkast (RSSI) [%d %%]"					                                        <status>				(g_sonoff_meter_koelkast, g_chart)							                                                                                { mqtt="<[mosquitto:tele/sonoff_meter_koelkast/STATE:state:JSONPATH($.Wifi.RSSI)]" }	

Switch		meter_koelkast_unifi_online	                            "Meter koelkast (U-online) [MAP(unifi.map):%s]"	                                        <switch>			    (g_sonoff_meter_koelkast)                                                                  	                                                { channel="unifi:client:unifi_thuis:unifi_sonoff_meter_koelkast:online" }
String		meter_koelkast_unifi_site	                                "Meter koelkast (U-site)"	                                                            <network>			    (g_sonoff_meter_koelkast)                                                                  	                                                { channel="unifi:client:unifi_thuis:unifi_sonoff_meter_koelkast:site" }
String		meter_koelkast_unifi_ap	                                    "Meter koelkast (U-ap)"                    	                                            <network>			    (g_sonoff_meter_koelkast)                                                                  	                                                { channel="unifi:client:unifi_thuis:unifi_sonoff_meter_koelkast:ap" }
String		meter_koelkast_unifi_essid	                                "Meter koelkast (U-essid)"	                                                            <chart>			        (g_sonoff_meter_koelkast)                                                                  	                                                { channel="unifi:client:unifi_thuis:unifi_sonoff_meter_koelkast:essid" }
Number		meter_koelkast_unifi_rssi	                                "Meter koelkast (U-RSSI) [%s]"						                                    <qualityofservice>	    (g_sonoff_meter_koelkast)	                                                                                                                { channel="unifi:client:unifi_thuis:unifi_sonoff_meter_koelkast:rssi" } 
Number		meter_koelkast_unifi_uptime	                                "Meter koelkast (U-Uptime) [%d]"						                                <time>				    (g_sonoff_meter_koelkast)	                                                                                                                { channel="unifi:client:unifi_thuis:unifi_sonoff_meter_koelkast:uptime" }
DateTime	meter_koelkast_unifi_lastseen                               "Meter koelkast (U-LastSeen) [%1$tH:%1$tM:%1$tS]"                                 	    <time>	                (g_sonoff_meter_koelkast)	                                                                                                                { channel="unifi:client:unifi_thuis:unifi_sonoff_meter_koelkast:lastSeen" }


// miflora spiderplant
Number      sensor_miflora_spiderplant_light_intensity                  "Sensor spiderplant (Sunlight intensity) [%d lux]"                                      <text>                  (g_sensor_miflora_spiderplant)                                                                                                              { mqtt="<[mosquitto:miflora/Spiderplant:state:JSONPATH($.light)]"}
Number      sensor_miflora_spiderplant_soil_moisture                    "Sensor spiderplant (Soil moisture) [%d %%]"                                            <text>                  (g_sensor_miflora_spiderplant)                                                                                                              { mqtt="<[mosquitto:miflora/Spiderplant:state:JSONPATH($.moisture)]"}
Number      sensor_miflora_spiderplant_temperature                      "Sensor spiderplant (Air temperature) [%.1f Â°C]"                                        <text>                  (g_sensor_miflora_spiderplant, g_emoncms_mqtt,g_lastupdate_rule, g_chart)                                                                   { mqtt="<[mosquitto:miflora/Spiderplant:state:JSONPATH($.temperature)]"}
Number      sensor_miflora_spiderplant_soil_conductivity                "Sensor spiderplant (Soil conductivity/fertility) [%d ÂµS/cm]"                           <text>                  (g_sensor_miflora_spiderplant)                                                                                                              { mqtt="<[mosquitto:miflora/Spiderplant:state:JSONPATH($.conductivity)]"}
Number      sensor_miflora_spiderplant_battery                          "Sensor spiderplant (Sensor battery level) [%d %%]"                                     <text>                  (g_sensor_miflora_spiderplant, g_chart)                                                                                                     { mqtt="<[mosquitto:miflora/Spiderplant:state:JSONPATH($.battery)]"}
DateTime    sensor_miflora_spiderplant_temperature_lastupdate           "Sensor spiderplant (Air temperature) (Lastupdate) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"                             (g_sensor_miflora_spiderplant, g_restore, g_lastupdate)

// bewegingssensor keuken
Switch      sensor_motion_keuken_motion_status                          "Bewegingssensor keuken (status) [%s]"                                                  <motion>                (g_mihome_motionsensor_keuken, gf_living)                                                                                                   { channel="mihome:sensor_motion_aq2:158d00016db7e7:motion" }
Number      sensor_motion_keuken_motion_timer                           "Bewegingssensor keuken (timer) [%d]"                                                   <clock>                 (g_mihome_motionsensor_keuken)                                                                                                              { channel="mihome:sensor_motion_aq2:158d00016db7e7:motionOffTimer" }      // minimum 5 seconds - remember that the sensor only triggers every minute to save energy
DateTime    sensor_motion_keuken_last_motion                            "Bewegingssensor keuken (last motion) [%1$tY-%1$tm-%1$td  %1$tH:%1$tM]"                 <motion>                (g_mihome_motionsensor_keuken, gf_living, g_restore, g_lastupdate)                                                                          { channel="mihome:sensor_motion_aq2:158d00016db7e7:lastMotion" }
Number      sensor_motion_keuken_battery                                "Bewegingssensor keuken (battery) [%d %%]"                                              <battery>               (g_mihome_motionsensor_keuken, g_restore, g_chart)                                                                                          { channel="mihome:sensor_motion_aq2:158d00016db7e7:batteryLevel" }
Switch      sensor_motion_keuken_battery_low                            "Bewegingssensor Keuken (battery low) [%s]"                                             <energy>                (g_mihome_motionsensor_keuken, g_restore)                                                                                                   { channel="mihome:sensor_motion_aq2:158d00016db7e7:lowBattery" }
Number      sensor_motion_keuken_illumination                           "Bewegingssensor keuken (illumination) [%d lux]"                                        <battery>               (g_mihome_motionsensor_keuken, g_chart, gf_living)                                                                                          { channel="mihome:sensor_motion_aq2:158d00016db7e7:illumination" }

// touch button toilet
Switch		switch_touch_toilet_net_online							    "Switch toilet (net) [%s]"							                                    <network>				(g_sonoff_toilet_bg)                                                                                                                        { channel="network:pingdevice:192_168_1_162:online" }
Number		switch_touch_toilet_net_time							    "Switch toilet (ping) [%.0f ms]"						                                <status>				(g_sonoff_toilet_bg,g_chart)                                                                                                                { channel="network:pingdevice:192_168_1_162:latency" }
Number		switch_touch_toilet_net_lastseen						    "Switch toilet (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"						        <status>				(g_sonoff_toilet_bg, g_restore)                                                                                                             { channel="network:pingdevice:192_168_1_162:lastseen" }
Switch		switch_touch_toilet_toggle								    "Switch toilet (switch) [%s]"						                                    <light> 				(g_sonoff_toilet_bg, gf_corridor, lights, scene_all_off)								                                                    { mqtt=">[mosquitto:cmnd/sonoff_licht_toilet_bg/power:command:*:default], <[mosquitto:stat/sonoff_licht_toilet_bg/POWER:state:default]" }
Switch		switch_touch_toilet_setting_all_off						    "Switch toilet (all off)"						                                        <switch> 				(g_sonoff_toilet_bg, settings_all_off_selection, g_restore)
String		switch_touch_toilet_toggle_startup_state				    "Switch toilet (startup state) [%s]"					                                <light> 				(g_sonoff_toilet_bg, g_maintenance_sonoff_status, g_sonoff_startup_states)			                                                        { mqtt="<[mosquitto:stat/sonoff_licht_toilet_bg/STATUS11:state:JSONPATH($.StatusSTS.POWER)]" }
String 		switch_touch_toilet_reachable							    "Switch toilet (reachable) [%s]"						                                <switch>				(g_sonoff_toilet_bg)												                                                                        { mqtt="<[mosquitto:tele/sonoff_licht_toilet_bg/LWT:state:MAP(reachable.map)]" }
Number		switch_touch_toilet_rssi								    "Switch toilet (RSSI) [%d %%]"						                                    <status>				(g_sonoff_toilet_bg, g_chart)											                                                                    { mqtt="<[mosquitto:tele/sonoff_licht_toilet_bg/STATE:state:JSONPATH($.Wifi.RSSI)]" }
String		switch_touch_toilet_action__sonoff_licht_toilet_bg  	    "Switch toilet (action)"								                                <network>				(g_maintenance_sonoff_action)			                                                                                                    { autoupdate="false" }
String		switch_touch_toilet_local_fw_version 					    "Switch toilet (running fw version) [%s]"									                                    (g_sonoff_toilet_bg, g_maintenance_sonoff_status, g_sonoff_firmware)		                                                                { mqtt="<[mosquitto:tele/sonoff_licht_toilet_bg/INFO1:state:JSONPATH($.Version)], <[mosquitto:stat/sonoff_licht_toilet_bg/STATUS2:state:JSONPATH($.StatusFWR.Version)]" }
String		switch_touch_toilet_fw_version 							    "Switch toilet (fw version) [%s]"											                                    (g_sonoff_toilet_bg, g_maintenance_sonoff_status)

// //Contact		switch_touch_toilet_unifi_online	                "Switch toilet (U-online) [MAP(unifi.map):%s]"	                                        <switch>			    (g_sonoff_toilet_bg)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_touch_toilet_beneden:online" }
// Contact		switch_touch_toilet_unifi_online	                    "Switch toilet (U-online)"                    	                                        <switch>			    (g_sonoff_toilet_bg)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_touch_toilet_beneden:online" }
// String		switch_touch_toilet_unifi_site	                        "Switch toilet (U-site)"	                                                            <network>			    (g_sonoff_toilet_bg)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_touch_toilet_beneden:site" }
// String		switch_touch_toilet_unifi_ap	                        "Switch toilet (U-ap)"                    	                                            <network>			    (g_sonoff_toilet_bg)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_touch_toilet_beneden:ap" }
// String		switch_touch_toilet_unifi_essid	                        "Switch toilet (U-essid)"	                                                            <chart>			        (g_sonoff_toilet_bg)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_touch_toilet_beneden:essid" }
// Number		switch_touch_toilet_unifi_rssi	                        "Switch toilet (U-RSSI) [%s]"						                                    <qualityofservice>	    (g_sonoff_toilet_bg)	                                                                                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_touch_toilet_beneden:rssi" } 
// Number		switch_touch_toilet_unifi_uptime	                    "Switch toilet (U-Uptime) [%d]"						                                    <time>				    (g_sonoff_toilet_bg)	                                                                                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_touch_toilet_beneden:uptime" }
// DateTime	switch_touch_toilet_unifi_lastseen                          "Switch toilet (U-LastSeen) [%1$tH:%1$tM:%1$tS]"                                 	    <time>	                (g_sonoff_toilet_bg)	                                                                                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_touch_toilet_beneden:lastSeen" }

// kerstboom
Switch		switch_kerstboom_net_online								    "Kerstboom (net) [%s]"								                                    <network>				(g_sonoff_kerstboom)                                                                                                                        { channel="network:pingdevice:192_168_1_163:online" }
Number		switch_kerstboom_net_time								    "Kerstboom (ping) [%.0f ms]"						                                    <status>				(g_sonoff_kerstboom, g_chart)                                                                                                               { channel="network:pingdevice:192_168_1_163:latency" }
DateTime	switch_kerstboom_net_lastseen							    "Kerstboom (lastseen) [%1$td.%1$tm.%1$tY %1$tH:%1$tM]"						            <status>				(g_sonoff_kerstboom)                                                                                                                        { channel="network:pingdevice:192_168_1_163:lastseen" }
Switch		switch_kerstboom_toggle									    "Kerstboom (switch) [%s]"							                                    <light> 				(g_sonoff_kerstboom, gf_living, lights, scene_all_off)	    [ "Lighting" ]				                                                    { mqtt=">[mosquitto:cmnd/sonoff_switch_kerstboom/power:command:*:default], <[mosquitto:stat/sonoff_switch_kerstboom/POWER:state:default]" }
Switch		switch_kerstboom_setting_all_off						    "Kerstboom (all off)"   							                                    <switch> 				(g_sonoff_kerstboom, settings_all_off_selection, g_restore)					                           
String		switch_kerstboom_toggle_startup_state					    "Kerstboom (startup state) [%s]"					                                    <light> 				(g_sonoff_kerstboom, gf_living,g_maintenance_sonoff_status, g_sonoff_startup_states)	                                                    { mqtt="<[mosquitto:stat/sonoff_switch_kerstboom/STATUS11:state:JSONPATH($.StatusSTS.POWER)]" }
String 		switch_kerstboom_reachable								    "Kerstboom (reachable) [%s]"						                                    <switch>				(g_sonoff_kerstboom)								                                                                                        { mqtt="<[mosquitto:tele/sonoff_switch_kerstboom/LWT:state:MAP(reachable.map)]" }
String		switch_kerstboom_rssi									    "Kerstboom (RSSI) [%d %%]"							                                    <status>				(g_sonoff_kerstboom, g_chart)								                                                                                { mqtt="<[mosquitto:tele/sonoff_switch_kerstboom/STATE:state:JSONPATH($.Wifi.RSSI)]" }
String		switch_kerstboom_action__sonoff_switch_kerstboom		    "Kerstboom (action)"								                                    <network>				(g_maintenance_sonoff_action) 					                                                                                            { autoupdate="false" }
String		switch_kerstboom_local_fw_version 						    "Kerstboom (running fw version) [%s]"										                                    (g_sonoff_kerstboom, g_maintenance_sonoff_status, g_sonoff_firmware)			                                                            { mqtt="<[mosquitto:tele/sonoff_switch_kerstboom/INFO1:state:JSONPATH($.Version)],<[mosquitto:stat/sonoff_switch_kerstboom/STATUS2:state:JSONPATH($.StatusFWR.Version)]" }
String		switch_kerstboom_fw_version 							    "Kerstboom (fw version) [%s]"												                                    (g_sonoff_kerstboom, g_maintenance_sonoff_status)

Switch		switch_kerstboom_unifi_online	                            "Kerstboom (U-online) [MAP(unifi.map):%s]"	                                            <switch>			    (g_sonoff_kerstboom)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_kerstboom:online" }
String		switch_kerstboom_unifi_site	                                "Kerstboom (U-site)"	                                                                <network>			    (g_sonoff_kerstboom)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_kerstboom:site" }
String		switch_kerstboom_unifi_ap	                                "Kerstboom (U-ap)"                    	                                                <network>			    (g_sonoff_kerstboom)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_kerstboom:ap" }
String		switch_kerstboom_unifi_essid	                            "Kerstboom (U-essid)"	                                                                <chart>			        (g_sonoff_kerstboom)                                                                  	                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_kerstboom:essid" }
Number		switch_kerstboom_unifi_rssi	                                "Kerstboom (U-RSSI) [%s]"						                                        <qualityofservice>	    (g_sonoff_kerstboom)	                                                                                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_kerstboom:rssi" } 
Number		switch_kerstboom_unifi_uptime	                            "Kerstboom (U-Uptime) [%d]"						                                        <time>				    (g_sonoff_kerstboom)	                                                                                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_kerstboom:uptime" }
DateTime	switch_kerstboom_unifi_lastseen                             "Kerstboom (U-LastSeen) [%1$tH:%1$tM:%1$tS]"                                 	        <time>	                (g_sonoff_kerstboom)	                                                                                                                    { channel="unifi:client:unifi_thuis:unifi_sonoff_kerstboom:lastSeen" }